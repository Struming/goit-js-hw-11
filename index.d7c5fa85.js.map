{"mappings":"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","sources":["<anon>","node_modules/simplelightbox/dist/simple-lightbox.esm.js"],"sourcesContent":["var $parcel$global =\ntypeof globalThis !== 'undefined'\n  ? globalThis\n  : typeof self !== 'undefined'\n  ? self\n  : typeof window !== 'undefined'\n  ? window\n  : typeof global !== 'undefined'\n  ? global\n  : {};\n/*!\r\n\tBy André Rinas, www.andrerinas.de\r\n\tDocumentation, www.simplelightbox.com\r\n\tAvailable for use under the MIT License\r\n\tVersion 2.14.1\r\n*/ class $945867cc3302d81d$var$SimpleLightbox {\n    defaultOptions = {\n        sourceAttr: \"href\",\n        overlay: true,\n        overlayOpacity: 0.7,\n        spinner: true,\n        nav: true,\n        navText: [\n            \"&lsaquo;\",\n            \"&rsaquo;\"\n        ],\n        captions: true,\n        captionDelay: 0,\n        captionSelector: \"img\",\n        captionType: \"attr\",\n        captionsData: \"title\",\n        captionPosition: \"bottom\",\n        captionClass: \"\",\n        close: true,\n        closeText: \"&times;\",\n        swipeClose: true,\n        showCounter: true,\n        fileExt: \"png|jpg|jpeg|gif|webp\",\n        animationSlide: true,\n        animationSpeed: 250,\n        preloading: true,\n        enableKeyboard: true,\n        loop: true,\n        rel: false,\n        docClose: true,\n        swipeTolerance: 50,\n        className: \"simple-lightbox\",\n        widthRatio: 0.8,\n        heightRatio: 0.9,\n        scaleImageToRatio: false,\n        disableRightClick: false,\n        disableScroll: true,\n        alertError: true,\n        alertErrorMessage: \"Image not found, next image will be loaded\",\n        additionalHtml: false,\n        history: true,\n        throttleInterval: 0,\n        doubleTapZoom: 2,\n        maxZoom: 10,\n        htmlClass: \"has-lightbox\",\n        rtl: false,\n        fixedClass: \"sl-fixed\",\n        fadeSpeed: 300,\n        uniqueImages: true,\n        focus: true,\n        scrollZoom: true,\n        scrollZoomFactor: 0.5,\n        download: false\n    };\n    transitionPrefix;\n    isPassiveEventsSupported;\n    transitionCapable = false;\n    isTouchDevice = \"ontouchstart\" in window;\n    isAppleDevice = /(Mac|iPhone|iPod|iPad)/i.test(navigator.platform);\n    initialLocationHash;\n    pushStateSupport = \"pushState\" in history;\n    isOpen = false;\n    isAnimating = false;\n    isClosing = false;\n    isFadeIn = false;\n    urlChangedOnce = false;\n    hashReseted = false;\n    historyHasChanges = false;\n    historyUpdateTimeout = null;\n    currentImage;\n    eventNamespace = \"simplelightbox\";\n    domNodes = {};\n    loadedImages = [];\n    initialImageIndex = 0;\n    currentImageIndex = 0;\n    initialSelector = null;\n    globalScrollbarWidth = 0;\n    controlCoordinates = {\n        swipeDiff: 0,\n        swipeYDiff: 0,\n        swipeStart: 0,\n        swipeEnd: 0,\n        swipeYStart: 0,\n        swipeYEnd: 0,\n        mousedown: false,\n        imageLeft: 0,\n        zoomed: false,\n        containerHeight: 0,\n        containerWidth: 0,\n        containerOffsetX: 0,\n        containerOffsetY: 0,\n        imgHeight: 0,\n        imgWidth: 0,\n        capture: false,\n        initialOffsetX: 0,\n        initialOffsetY: 0,\n        initialPointerOffsetX: 0,\n        initialPointerOffsetY: 0,\n        initialPointerOffsetX2: 0,\n        initialPointerOffsetY2: 0,\n        initialScale: 1,\n        initialPinchDistance: 0,\n        pointerOffsetX: 0,\n        pointerOffsetY: 0,\n        pointerOffsetX2: 0,\n        pointerOffsetY2: 0,\n        targetOffsetX: 0,\n        targetOffsetY: 0,\n        targetScale: 0,\n        pinchOffsetX: 0,\n        pinchOffsetY: 0,\n        limitOffsetX: 0,\n        limitOffsetY: 0,\n        scaleDifference: 0,\n        targetPinchDistance: 0,\n        touchCount: 0,\n        doubleTapped: false,\n        touchmoveCount: 0\n    };\n    constructor(elements, options){\n        this.options = Object.assign(this.defaultOptions, options);\n        this.isPassiveEventsSupported = this.checkPassiveEventsSupport();\n        if (typeof elements === \"string\") {\n            this.initialSelector = elements;\n            this.elements = Array.from(document.querySelectorAll(elements));\n        } else this.elements = typeof elements.length !== \"undefined\" && elements.length > 0 ? Array.from(elements) : [\n            elements\n        ];\n        this.relatedElements = [];\n        this.transitionPrefix = this.calculateTransitionPrefix();\n        this.transitionCapable = this.transitionPrefix !== false;\n        this.initialLocationHash = this.hash;\n        // this should be handled by attribute selector IMHO! => 'a[rel=bla]'...\n        if (this.options.rel) this.elements = this.getRelated(this.options.rel);\n        if (this.options.uniqueImages) {\n            let imgArr = [];\n            this.elements = Array.from(this.elements).filter((element)=>{\n                let src = element.getAttribute(this.options.sourceAttr);\n                if (imgArr.indexOf(src) === -1) {\n                    imgArr.push(src);\n                    return true;\n                }\n                return false;\n            });\n        }\n        this.createDomNodes();\n        if (this.options.close) this.domNodes.wrapper.appendChild(this.domNodes.closeButton);\n        if (this.options.nav) this.domNodes.wrapper.appendChild(this.domNodes.navigation);\n        if (this.options.spinner) this.domNodes.wrapper.appendChild(this.domNodes.spinner);\n        this.addEventListener(this.elements, \"click.\" + this.eventNamespace, (event)=>{\n            if (this.isValidLink(event.currentTarget)) {\n                event.preventDefault();\n                if (this.isAnimating) return false;\n                this.initialImageIndex = this.elements.indexOf(event.currentTarget);\n                this.openImage(event.currentTarget);\n            }\n        });\n        // close addEventListener click addEventListener doc\n        if (this.options.docClose) this.addEventListener(this.domNodes.wrapper, [\n            \"click.\" + this.eventNamespace,\n            \"touchstart.\" + this.eventNamespace\n        ], (event)=>{\n            if (this.isOpen && event.target === event.currentTarget) this.close();\n        });\n        // disable rightclick\n        if (this.options.disableRightClick) this.addEventListener(document.body, \"contextmenu.\" + this.eventNamespace, (event)=>{\n            if (event.target.parentElement.classList.contains(\"sl-image\")) event.preventDefault();\n        });\n        // keyboard-control\n        if (this.options.enableKeyboard) this.addEventListener(document.body, \"keyup.\" + this.eventNamespace, this.throttle((event)=>{\n            this.controlCoordinates.swipeDiff = 0;\n            // keyboard control only if lightbox is open\n            if (this.isAnimating && event.key === \"Escape\") {\n                this.currentImage.setAttribute(\"src\", \"\");\n                this.isAnimating = false;\n                this.close();\n                return;\n            }\n            if (this.isOpen) {\n                event.preventDefault();\n                if (event.key === \"Escape\") this.close();\n                if (!this.isAnimating && [\n                    \"ArrowLeft\",\n                    \"ArrowRight\"\n                ].indexOf(event.key) > -1) this.loadImage(event.key === \"ArrowRight\" ? 1 : -1);\n            }\n        }, this.options.throttleInterval));\n        this.addEvents();\n    }\n    checkPassiveEventsSupport() {\n        // https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md#feature-detection\n        // Test via a getter in the options object to see if the passive property is accessed\n        let supportsPassive = false;\n        try {\n            let opts = Object.defineProperty({}, \"passive\", {\n                get: function() {\n                    supportsPassive = true;\n                }\n            });\n            window.addEventListener(\"testPassive\", null, opts);\n            window.removeEventListener(\"testPassive\", null, opts);\n        } catch (e) {}\n        return supportsPassive;\n    }\n    getCaptionElement(elem) {\n        // look at sibling selector\n        if (this.options.captionSelector.startsWith(\"+\")) {\n            let selector = this.options.captionSelector.replace(/^\\+/, \"\").trimStart();\n            let sibling = elem.nextElementSibling;\n            if (sibling.matches(selector)) return sibling;\n            return false;\n        } else if (this.options.captionSelector.startsWith(\">\")) {\n            let selector = this.options.captionSelector.replace(/^>/, \"\").trimStart();\n            return elem.querySelector(selector);\n        } else return elem.querySelector(this.options.captionSelector);\n    }\n    generateQuerySelector(elem) {\n        const { tagName: tagName , id: id , className: className , parentNode: parentNode  } = elem;\n        if (tagName === \"HTML\") return \"HTML\";\n        let str = tagName;\n        str += id !== \"\" ? `#${id}` : \"\";\n        if (className) {\n            const classes = className.trim().split(/\\s/);\n            for(let i = 0; i < classes.length; i++)str += `.${classes[i]}`;\n        }\n        let childIndex = 1;\n        for(let e = elem; e.previousElementSibling; e = e.previousElementSibling)childIndex += 1;\n        str += `:nth-child(${childIndex})`;\n        return `${this.generateQuerySelector(parentNode)} > ${str}`;\n    }\n    createDomNodes() {\n        this.domNodes.overlay = document.createElement(\"div\");\n        this.domNodes.overlay.classList.add(\"sl-overlay\");\n        this.domNodes.overlay.dataset.opacityTarget = this.options.overlayOpacity;\n        this.domNodes.closeButton = document.createElement(\"button\");\n        this.domNodes.closeButton.classList.add(\"sl-close\");\n        this.domNodes.closeButton.innerHTML = this.options.closeText;\n        this.domNodes.spinner = document.createElement(\"div\");\n        this.domNodes.spinner.classList.add(\"sl-spinner\");\n        this.domNodes.spinner.innerHTML = \"<div></div>\";\n        this.domNodes.navigation = document.createElement(\"div\");\n        this.domNodes.navigation.classList.add(\"sl-navigation\");\n        this.domNodes.navigation.innerHTML = `<button class=\"sl-prev\">${this.options.navText[0]}</button><button class=\"sl-next\">${this.options.navText[1]}</button>`;\n        this.domNodes.counter = document.createElement(\"div\");\n        this.domNodes.counter.classList.add(\"sl-counter\");\n        this.domNodes.counter.innerHTML = '<span class=\"sl-current\"></span>/<span class=\"sl-total\"></span>';\n        this.domNodes.download = document.createElement(\"div\");\n        this.domNodes.download.classList.add(\"sl-download\");\n        this.domNodes.downloadLink = document.createElement(\"a\");\n        this.domNodes.downloadLink.setAttribute(\"download\", \"\");\n        this.domNodes.downloadLink.textContent = this.options.download;\n        this.domNodes.download.appendChild(this.domNodes.downloadLink);\n        this.domNodes.caption = document.createElement(\"div\");\n        this.domNodes.caption.classList.add(\"sl-caption\", \"pos-\" + this.options.captionPosition);\n        if (this.options.captionClass) {\n            let captionClasses = this.options.captionClass.split(/[\\s,]+/);\n            this.domNodes.caption.classList.add(...captionClasses);\n        }\n        this.domNodes.image = document.createElement(\"div\");\n        this.domNodes.image.classList.add(\"sl-image\");\n        this.domNodes.wrapper = document.createElement(\"div\");\n        this.domNodes.wrapper.classList.add(\"sl-wrapper\");\n        this.domNodes.wrapper.setAttribute(\"tabindex\", -1);\n        this.domNodes.wrapper.setAttribute(\"role\", \"dialog\");\n        this.domNodes.wrapper.setAttribute(\"aria-hidden\", false);\n        if (this.options.className) this.domNodes.wrapper.classList.add(this.options.className);\n        if (this.options.rtl) this.domNodes.wrapper.classList.add(\"sl-dir-rtl\");\n    }\n    throttle(func, limit) {\n        let inThrottle;\n        return function() {\n            if (!inThrottle) {\n                func.apply(this, arguments);\n                inThrottle = true;\n                setTimeout(function() {\n                    return inThrottle = false;\n                }, limit);\n            }\n        };\n    }\n    isValidLink(element) {\n        return !this.options.fileExt || element.getAttribute(this.options.sourceAttr) && new RegExp(\"(\" + this.options.fileExt + \")($|\\\\?.*$)\", \"i\").test(element.getAttribute(this.options.sourceAttr));\n    }\n    calculateTransitionPrefix() {\n        let s = (document.body || document.documentElement).style;\n        return \"transition\" in s ? \"\" : \"WebkitTransition\" in s ? \"-webkit-\" : \"MozTransition\" in s ? \"-moz-\" : \"OTransition\" in s ? \"-o\" : false;\n    }\n    getScrollbarWidth() {\n        let scrollbarWidth = 0;\n        let scrollDiv = document.createElement(\"div\");\n        scrollDiv.classList.add(\"sl-scrollbar-measure\");\n        document.body.appendChild(scrollDiv);\n        scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n        document.body.removeChild(scrollDiv);\n        return scrollbarWidth;\n    }\n    toggleScrollbar(type) {\n        let scrollbarWidth = 0;\n        let fixedElements = [].slice.call(document.querySelectorAll(\".\" + this.options.fixedClass));\n        if (type === \"hide\") {\n            let fullWindowWidth = window.innerWidth;\n            if (!fullWindowWidth) {\n                let documentElementRect = document.documentElement.getBoundingClientRect();\n                fullWindowWidth = documentElementRect.right - Math.abs(documentElementRect.left);\n            }\n            if (document.body.clientWidth < fullWindowWidth || this.isAppleDevice) {\n                let paddingRight = parseInt(window.getComputedStyle(document.body).paddingRight || 0, 10);\n                scrollbarWidth = this.getScrollbarWidth();\n                document.body.dataset.originalPaddingRight = paddingRight;\n                if (scrollbarWidth > 0 || scrollbarWidth == 0 && this.isAppleDevice) {\n                    document.body.classList.add(\"hidden-scroll\");\n                    document.body.style.paddingRight = paddingRight + scrollbarWidth + \"px\";\n                    fixedElements.forEach((element)=>{\n                        const actualPadding = element.style.paddingRight;\n                        const calculatedPadding = window.getComputedStyle(element)[\"padding-right\"];\n                        element.dataset.originalPaddingRight = actualPadding;\n                        element.style.paddingRight = `${parseFloat(calculatedPadding) + scrollbarWidth}px`;\n                    });\n                }\n            }\n        } else {\n            document.body.classList.remove(\"hidden-scroll\");\n            document.body.style.paddingRight = document.body.dataset.originalPaddingRight + \"px\";\n            fixedElements.forEach((element)=>{\n                const padding = element.dataset.originalPaddingRight;\n                if (typeof padding !== \"undefined\") element.style.paddingRight = padding;\n            });\n        }\n        return scrollbarWidth;\n    }\n    close() {\n        if (!this.isOpen || this.isAnimating || this.isClosing) return false;\n        this.isClosing = true;\n        let element = this.relatedElements[this.currentImageIndex];\n        element.dispatchEvent(new Event(\"close.simplelightbox\"));\n        if (this.options.history) {\n            this.historyHasChanges = false;\n            if (!this.hashReseted) this.resetHash();\n        }\n        this.removeEventListener(document, \"focusin.\" + this.eventNamespace);\n        this.fadeOut(this.domNodes.overlay, this.options.fadeSpeed);\n        this.fadeOut(document.querySelectorAll(\".sl-image img,  .sl-close, .sl-navigation, .sl-image .sl-caption, .sl-counter\"), this.options.fadeSpeed, ()=>{\n            if (this.options.disableScroll) this.toggleScrollbar(\"show\");\n            if (this.options.htmlClass && this.options.htmlClass !== \"\") document.querySelector(\"html\").classList.remove(this.options.htmlClass);\n            document.body.removeChild(this.domNodes.wrapper);\n            if (this.options.overlay) document.body.removeChild(this.domNodes.overlay);\n            this.domNodes.additionalHtml = null;\n            this.domNodes.download = null;\n            element.dispatchEvent(new Event(\"closed.simplelightbox\"));\n            this.isClosing = false;\n        });\n        this.currentImage = null;\n        this.isOpen = false;\n        this.isAnimating = false;\n        // reset touchcontrol coordinates\n        for(let key in this.controlCoordinates)this.controlCoordinates[key] = 0;\n        this.controlCoordinates.mousedown = false;\n        this.controlCoordinates.zoomed = false;\n        this.controlCoordinates.capture = false;\n        this.controlCoordinates.initialScale = this.minMax(1, 1, this.options.maxZoom);\n        this.controlCoordinates.doubleTapped = false;\n    }\n    get hash() {\n        return window.location.hash.substring(1);\n    }\n    preload() {\n        let index = this.currentImageIndex, length = this.relatedElements.length, next = index + 1 < 0 ? length - 1 : index + 1 >= length - 1 ? 0 : index + 1, prev = index - 1 < 0 ? length - 1 : index - 1 >= length - 1 ? 0 : index - 1, nextImage = new Image(), prevImage = new Image();\n        nextImage.addEventListener(\"load\", (event)=>{\n            let src = event.target.getAttribute(\"src\");\n            if (this.loadedImages.indexOf(src) === -1) this.loadedImages.push(src);\n            this.relatedElements[index].dispatchEvent(new Event(\"nextImageLoaded.\" + this.eventNamespace));\n        });\n        nextImage.setAttribute(\"src\", this.relatedElements[next].getAttribute(this.options.sourceAttr));\n        prevImage.addEventListener(\"load\", (event)=>{\n            let src = event.target.getAttribute(\"src\");\n            if (this.loadedImages.indexOf(src) === -1) this.loadedImages.push(src);\n            this.relatedElements[index].dispatchEvent(new Event(\"prevImageLoaded.\" + this.eventNamespace));\n        });\n        prevImage.setAttribute(\"src\", this.relatedElements[prev].getAttribute(this.options.sourceAttr));\n    }\n    loadImage(direction) {\n        let slideDirection = direction;\n        if (this.options.rtl) direction = -direction;\n        this.relatedElements[this.currentImageIndex].dispatchEvent(new Event(\"change.\" + this.eventNamespace));\n        this.relatedElements[this.currentImageIndex].dispatchEvent(new Event((direction === 1 ? \"next\" : \"prev\") + \".\" + this.eventNamespace));\n        let newIndex = this.currentImageIndex + direction;\n        if (this.isAnimating || (newIndex < 0 || newIndex >= this.relatedElements.length) && this.options.loop === false) return false;\n        this.currentImageIndex = newIndex < 0 ? this.relatedElements.length - 1 : newIndex > this.relatedElements.length - 1 ? 0 : newIndex;\n        this.domNodes.counter.querySelector(\".sl-current\").innerHTML = this.currentImageIndex + 1;\n        if (this.options.animationSlide) this.slide(this.options.animationSpeed / 1000, -100 * slideDirection - this.controlCoordinates.swipeDiff + \"px\");\n        this.fadeOut(this.domNodes.image, this.options.fadeSpeed, ()=>{\n            this.isAnimating = true;\n            if (!this.isClosing) setTimeout(()=>{\n                let element = this.relatedElements[this.currentImageIndex];\n                if (!this.currentImage) return;\n                this.currentImage.setAttribute(\"src\", element.getAttribute(this.options.sourceAttr));\n                if (this.loadedImages.indexOf(element.getAttribute(this.options.sourceAttr)) === -1) this.show(this.domNodes.spinner);\n                if (this.domNodes.image.contains(this.domNodes.caption)) this.domNodes.image.removeChild(this.domNodes.caption);\n                this.adjustImage(slideDirection);\n                if (this.options.preloading) this.preload();\n            }, 100);\n            else this.isAnimating = false;\n        });\n    }\n    adjustImage(direction) {\n        if (!this.currentImage) return false;\n        let tmpImage = new Image(), windowWidth = window.innerWidth * this.options.widthRatio, windowHeight = window.innerHeight * this.options.heightRatio;\n        tmpImage.setAttribute(\"src\", this.currentImage.getAttribute(\"src\"));\n        this.currentImage.dataset.scale = 1;\n        this.currentImage.dataset.translateX = 0;\n        this.currentImage.dataset.translateY = 0;\n        this.zoomPanElement(0, 0, 1);\n        tmpImage.addEventListener(\"error\", (event)=>{\n            this.relatedElements[this.currentImageIndex].dispatchEvent(new Event(\"error.\" + this.eventNamespace));\n            this.isAnimating = false;\n            this.isOpen = true;\n            this.domNodes.spinner.style.display = \"none\";\n            let dirIsDefined = direction === 1 || direction === -1;\n            if (this.initialImageIndex === this.currentImageIndex && dirIsDefined) return this.close();\n            if (this.options.alertError) alert(this.options.alertErrorMessage);\n            this.loadImage(dirIsDefined ? direction : 1);\n        });\n        tmpImage.addEventListener(\"load\", (event)=>{\n            if (typeof direction !== \"undefined\") {\n                this.relatedElements[this.currentImageIndex].dispatchEvent(new Event(\"changed.\" + this.eventNamespace));\n                this.relatedElements[this.currentImageIndex].dispatchEvent(new Event((direction === 1 ? \"nextDone\" : \"prevDone\") + \".\" + this.eventNamespace));\n            }\n            // history\n            if (this.options.history) this.updateURL();\n            if (this.loadedImages.indexOf(this.currentImage.getAttribute(\"src\")) === -1) this.loadedImages.push(this.currentImage.getAttribute(\"src\"));\n            let imageWidth = event.target.width, imageHeight = event.target.height;\n            if (this.options.scaleImageToRatio || imageWidth > windowWidth || imageHeight > windowHeight) {\n                let ratio = imageWidth / imageHeight > windowWidth / windowHeight ? imageWidth / windowWidth : imageHeight / windowHeight;\n                imageWidth /= ratio;\n                imageHeight /= ratio;\n            }\n            this.domNodes.image.style.top = (window.innerHeight - imageHeight) / 2 + \"px\";\n            this.domNodes.image.style.left = (window.innerWidth - imageWidth - this.globalScrollbarWidth) / 2 + \"px\";\n            this.domNodes.image.style.width = imageWidth + \"px\";\n            this.domNodes.image.style.height = imageHeight + \"px\";\n            this.domNodes.spinner.style.display = \"none\";\n            if (this.options.focus) this.forceFocus();\n            this.fadeIn(this.currentImage, this.options.fadeSpeed, ()=>{\n                if (this.options.focus) this.domNodes.wrapper.focus();\n            });\n            this.isOpen = true;\n            let captionContainer, captionText;\n            if (typeof this.options.captionSelector === \"string\") captionContainer = this.options.captionSelector === \"self\" ? this.relatedElements[this.currentImageIndex] : this.getCaptionElement(this.relatedElements[this.currentImageIndex]);\n            else if (typeof this.options.captionSelector === \"function\") captionContainer = this.options.captionSelector(this.relatedElements[this.currentImageIndex]);\n            if (this.options.captions && captionContainer) {\n                if (this.options.captionType === \"data\") captionText = captionContainer.dataset[this.options.captionsData];\n                else if (this.options.captionType === \"text\") captionText = captionContainer.innerHTML;\n                else captionText = captionContainer.getAttribute(this.options.captionsData);\n            }\n            if (!this.options.loop) {\n                if (this.currentImageIndex === 0) this.hide(this.domNodes.navigation.querySelector(\".sl-prev\"));\n                if (this.currentImageIndex >= this.relatedElements.length - 1) this.hide(this.domNodes.navigation.querySelector(\".sl-next\"));\n                if (this.currentImageIndex > 0) this.show(this.domNodes.navigation.querySelector(\".sl-prev\"));\n                if (this.currentImageIndex < this.relatedElements.length - 1) this.show(this.domNodes.navigation.querySelector(\".sl-next\"));\n            } else if (this.relatedElements.length === 1) this.hide(this.domNodes.navigation.querySelectorAll(\".sl-prev, .sl-next\"));\n            else this.show(this.domNodes.navigation.querySelectorAll(\".sl-prev, .sl-next\"));\n            if (direction === 1 || direction === -1) {\n                if (this.options.animationSlide) {\n                    this.slide(0, 100 * direction + \"px\");\n                    setTimeout(()=>{\n                        this.slide(this.options.animationSpeed / 1000, \"0px\");\n                    }, 50);\n                }\n                this.fadeIn(this.domNodes.image, this.options.fadeSpeed, ()=>{\n                    this.isAnimating = false;\n                    this.setCaption(captionText, imageWidth);\n                });\n            } else {\n                this.isAnimating = false;\n                this.setCaption(captionText, imageWidth);\n            }\n            if (this.options.additionalHtml && !this.domNodes.additionalHtml) {\n                this.domNodes.additionalHtml = document.createElement(\"div\");\n                this.domNodes.additionalHtml.classList.add(\"sl-additional-html\");\n                this.domNodes.additionalHtml.innerHTML = this.options.additionalHtml;\n                this.domNodes.image.appendChild(this.domNodes.additionalHtml);\n            }\n            if (this.options.download) this.domNodes.downloadLink.setAttribute(\"href\", this.currentImage.getAttribute(\"src\"));\n        });\n    }\n    zoomPanElement(targetOffsetX, targetOffsetY, targetScale) {\n        this.currentImage.style[this.transitionPrefix + \"transform\"] = \"translate(\" + targetOffsetX + \",\" + targetOffsetY + \") scale(\" + targetScale + \")\";\n    }\n    minMax(value, min, max) {\n        return value < min ? min : value > max ? max : value;\n    }\n    setZoomData(initialScale, targetOffsetX, targetOffsetY) {\n        this.currentImage.dataset.scale = initialScale;\n        this.currentImage.dataset.translateX = targetOffsetX;\n        this.currentImage.dataset.translateY = targetOffsetY;\n    }\n    hashchangeHandler() {\n        if (this.isOpen && this.hash === this.initialLocationHash) {\n            this.hashReseted = true;\n            this.close();\n        }\n    }\n    addEvents() {\n        // resize/responsive\n        this.addEventListener(window, \"resize.\" + this.eventNamespace, (event)=>{\n            //this.adjustImage.bind(this)\n            if (this.isOpen) this.adjustImage();\n        });\n        this.addEventListener(this.domNodes.closeButton, [\n            \"click.\" + this.eventNamespace,\n            \"touchstart.\" + this.eventNamespace\n        ], this.close.bind(this));\n        if (this.options.history) setTimeout(()=>{\n            this.addEventListener(window, \"hashchange.\" + this.eventNamespace, (event)=>{\n                if (this.isOpen) this.hashchangeHandler();\n            });\n        }, 40);\n        this.addEventListener(this.domNodes.navigation.getElementsByTagName(\"button\"), \"click.\" + this.eventNamespace, (event)=>{\n            if (!event.currentTarget.tagName.match(/button/i)) return true;\n            event.preventDefault();\n            this.controlCoordinates.swipeDiff = 0;\n            this.loadImage(event.currentTarget.classList.contains(\"sl-next\") ? 1 : -1);\n        });\n        if (this.options.scrollZoom) {\n            let scale = 1;\n            this.addEventListener(this.domNodes.image, [\n                \"mousewheel\",\n                \"DOMMouseScroll\"\n            ], (event)=>{\n                if (this.controlCoordinates.mousedown || this.isAnimating || this.isClosing || !this.isOpen) return true;\n                if (this.controlCoordinates.containerHeight == 0) {\n                    this.controlCoordinates.containerHeight = this.getDimensions(this.domNodes.image).height;\n                    this.controlCoordinates.containerWidth = this.getDimensions(this.domNodes.image).width;\n                    this.controlCoordinates.imgHeight = this.getDimensions(this.currentImage).height;\n                    this.controlCoordinates.imgWidth = this.getDimensions(this.currentImage).width;\n                    this.controlCoordinates.containerOffsetX = this.domNodes.image.offsetLeft;\n                    this.controlCoordinates.containerOffsetY = this.domNodes.image.offsetTop;\n                    this.controlCoordinates.initialOffsetX = parseFloat(this.currentImage.dataset.translateX);\n                    this.controlCoordinates.initialOffsetY = parseFloat(this.currentImage.dataset.translateY);\n                }\n                // event.preventDefault();\n                let delta = event.delta || event.wheelDelta;\n                if (delta === undefined) //we are on firefox\n                delta = event.detail;\n                delta = Math.max(-1, Math.min(1, delta)); // cap the delta to [-1,1] for cross browser consistency\n                // apply zoom\n                scale += delta * this.options.scrollZoomFactor * scale;\n                scale = Math.max(1, Math.min(this.options.maxZoom, scale));\n                this.controlCoordinates.targetScale = scale;\n                let scrollTopPos = document.documentElement.scrollTop || document.body.scrollTop;\n                this.controlCoordinates.pinchOffsetX = event.pageX;\n                this.controlCoordinates.pinchOffsetY = event.pageY - scrollTopPos || 0; // need to substract the scroll position\n                this.controlCoordinates.limitOffsetX = (this.controlCoordinates.imgWidth * this.controlCoordinates.targetScale - this.controlCoordinates.containerWidth) / 2;\n                this.controlCoordinates.limitOffsetY = (this.controlCoordinates.imgHeight * this.controlCoordinates.targetScale - this.controlCoordinates.containerHeight) / 2;\n                this.controlCoordinates.scaleDifference = this.controlCoordinates.targetScale - this.controlCoordinates.initialScale;\n                this.controlCoordinates.targetOffsetX = this.controlCoordinates.imgWidth * this.controlCoordinates.targetScale <= this.controlCoordinates.containerWidth ? 0 : this.minMax(this.controlCoordinates.initialOffsetX - (this.controlCoordinates.pinchOffsetX - this.controlCoordinates.containerOffsetX - this.controlCoordinates.containerWidth / 2 - this.controlCoordinates.initialOffsetX) / (this.controlCoordinates.targetScale - this.controlCoordinates.scaleDifference) * this.controlCoordinates.scaleDifference, this.controlCoordinates.limitOffsetX * -1, this.controlCoordinates.limitOffsetX);\n                this.controlCoordinates.targetOffsetY = this.controlCoordinates.imgHeight * this.controlCoordinates.targetScale <= this.controlCoordinates.containerHeight ? 0 : this.minMax(this.controlCoordinates.initialOffsetY - (this.controlCoordinates.pinchOffsetY - this.controlCoordinates.containerOffsetY - this.controlCoordinates.containerHeight / 2 - this.controlCoordinates.initialOffsetY) / (this.controlCoordinates.targetScale - this.controlCoordinates.scaleDifference) * this.controlCoordinates.scaleDifference, this.controlCoordinates.limitOffsetY * -1, this.controlCoordinates.limitOffsetY);\n                this.zoomPanElement(this.controlCoordinates.targetOffsetX + \"px\", this.controlCoordinates.targetOffsetY + \"px\", this.controlCoordinates.targetScale);\n                if (this.controlCoordinates.targetScale > 1) {\n                    this.controlCoordinates.zoomed = true;\n                    if ((!this.domNodes.caption.style.opacity || this.domNodes.caption.style.opacity > 0) && this.domNodes.caption.style.display !== \"none\") this.fadeOut(this.domNodes.caption, this.options.fadeSpeed);\n                } else {\n                    if (this.controlCoordinates.initialScale === 1) {\n                        this.controlCoordinates.zoomed = false;\n                        if (this.domNodes.caption.style.display === \"none\") this.fadeIn(this.domNodes.caption, this.options.fadeSpeed);\n                    }\n                    this.controlCoordinates.initialPinchDistance = null;\n                    this.controlCoordinates.capture = false;\n                }\n                this.controlCoordinates.initialPinchDistance = this.controlCoordinates.targetPinchDistance;\n                this.controlCoordinates.initialScale = this.controlCoordinates.targetScale;\n                this.controlCoordinates.initialOffsetX = this.controlCoordinates.targetOffsetX;\n                this.controlCoordinates.initialOffsetY = this.controlCoordinates.targetOffsetY;\n                this.setZoomData(this.controlCoordinates.targetScale, this.controlCoordinates.targetOffsetX, this.controlCoordinates.targetOffsetY);\n                this.zoomPanElement(this.controlCoordinates.targetOffsetX + \"px\", this.controlCoordinates.targetOffsetY + \"px\", this.controlCoordinates.targetScale);\n            });\n        }\n        this.addEventListener(this.domNodes.image, [\n            \"touchstart.\" + this.eventNamespace,\n            \"mousedown.\" + this.eventNamespace\n        ], (event)=>{\n            if (event.target.tagName === \"A\" && event.type === \"touchstart\") return true;\n            if (event.type === \"mousedown\") {\n                event.preventDefault();\n                this.controlCoordinates.initialPointerOffsetX = event.clientX;\n                this.controlCoordinates.initialPointerOffsetY = event.clientY;\n                this.controlCoordinates.containerHeight = this.getDimensions(this.domNodes.image).height;\n                this.controlCoordinates.containerWidth = this.getDimensions(this.domNodes.image).width;\n                this.controlCoordinates.imgHeight = this.getDimensions(this.currentImage).height;\n                this.controlCoordinates.imgWidth = this.getDimensions(this.currentImage).width;\n                this.controlCoordinates.containerOffsetX = this.domNodes.image.offsetLeft;\n                this.controlCoordinates.containerOffsetY = this.domNodes.image.offsetTop;\n                this.controlCoordinates.initialOffsetX = parseFloat(this.currentImage.dataset.translateX);\n                this.controlCoordinates.initialOffsetY = parseFloat(this.currentImage.dataset.translateY);\n                this.controlCoordinates.capture = true;\n            } else {\n                this.controlCoordinates.touchCount = event.touches.length;\n                this.controlCoordinates.initialPointerOffsetX = event.touches[0].clientX;\n                this.controlCoordinates.initialPointerOffsetY = event.touches[0].clientY;\n                this.controlCoordinates.containerHeight = this.getDimensions(this.domNodes.image).height;\n                this.controlCoordinates.containerWidth = this.getDimensions(this.domNodes.image).width;\n                this.controlCoordinates.imgHeight = this.getDimensions(this.currentImage).height;\n                this.controlCoordinates.imgWidth = this.getDimensions(this.currentImage).width;\n                this.controlCoordinates.containerOffsetX = this.domNodes.image.offsetLeft;\n                this.controlCoordinates.containerOffsetY = this.domNodes.image.offsetTop;\n                if (this.controlCoordinates.touchCount === 1) /* Single touch */ {\n                    if (!this.controlCoordinates.doubleTapped) {\n                        this.controlCoordinates.doubleTapped = true;\n                        setTimeout(()=>{\n                            this.controlCoordinates.doubleTapped = false;\n                        }, 300);\n                    } else {\n                        this.currentImage.classList.add(\"sl-transition\");\n                        if (!this.controlCoordinates.zoomed) {\n                            this.controlCoordinates.initialScale = this.options.doubleTapZoom;\n                            this.setZoomData(this.controlCoordinates.initialScale, 0, 0);\n                            this.zoomPanElement(\"0px\", \"0px\", this.controlCoordinates.initialScale);\n                            if ((!this.domNodes.caption.style.opacity || this.domNodes.caption.style.opacity > 0) && this.domNodes.caption.style.display !== \"none\") this.fadeOut(this.domNodes.caption, this.options.fadeSpeed);\n                            this.controlCoordinates.zoomed = true;\n                        } else {\n                            this.controlCoordinates.initialScale = 1;\n                            this.setZoomData(this.controlCoordinates.initialScale, 0, 0);\n                            this.zoomPanElement(\"0px\", \"0px\", this.controlCoordinates.initialScale);\n                            this.controlCoordinates.zoomed = false;\n                        }\n                        setTimeout(()=>{\n                            if (this.currentImage) this.currentImage.classList.remove(\"sl-transition\");\n                        }, 200);\n                        return false;\n                    }\n                    this.controlCoordinates.initialOffsetX = parseFloat(this.currentImage.dataset.translateX);\n                    this.controlCoordinates.initialOffsetY = parseFloat(this.currentImage.dataset.translateY);\n                } else if (this.controlCoordinates.touchCount === 2) /* Pinch */ {\n                    this.controlCoordinates.initialPointerOffsetX2 = event.touches[1].clientX;\n                    this.controlCoordinates.initialPointerOffsetY2 = event.touches[1].clientY;\n                    this.controlCoordinates.initialOffsetX = parseFloat(this.currentImage.dataset.translateX);\n                    this.controlCoordinates.initialOffsetY = parseFloat(this.currentImage.dataset.translateY);\n                    this.controlCoordinates.pinchOffsetX = (this.controlCoordinates.initialPointerOffsetX + this.controlCoordinates.initialPointerOffsetX2) / 2;\n                    this.controlCoordinates.pinchOffsetY = (this.controlCoordinates.initialPointerOffsetY + this.controlCoordinates.initialPointerOffsetY2) / 2;\n                    this.controlCoordinates.initialPinchDistance = Math.sqrt((this.controlCoordinates.initialPointerOffsetX - this.controlCoordinates.initialPointerOffsetX2) * (this.controlCoordinates.initialPointerOffsetX - this.controlCoordinates.initialPointerOffsetX2) + (this.controlCoordinates.initialPointerOffsetY - this.controlCoordinates.initialPointerOffsetY2) * (this.controlCoordinates.initialPointerOffsetY - this.controlCoordinates.initialPointerOffsetY2));\n                }\n                this.controlCoordinates.capture = true;\n            }\n            if (this.controlCoordinates.mousedown) return true;\n            if (this.transitionCapable) this.controlCoordinates.imageLeft = parseInt(this.domNodes.image.style.left, 10);\n            this.controlCoordinates.mousedown = true;\n            this.controlCoordinates.swipeDiff = 0;\n            this.controlCoordinates.swipeYDiff = 0;\n            this.controlCoordinates.swipeStart = event.pageX || event.touches[0].pageX;\n            this.controlCoordinates.swipeYStart = event.pageY || event.touches[0].pageY;\n            return false;\n        });\n        this.addEventListener(this.domNodes.image, [\n            \"touchmove.\" + this.eventNamespace,\n            \"mousemove.\" + this.eventNamespace,\n            \"MSPointerMove\"\n        ], (event)=>{\n            if (!this.controlCoordinates.mousedown) return true;\n            if (event.type === \"touchmove\") {\n                if (this.controlCoordinates.capture === false) return false;\n                this.controlCoordinates.pointerOffsetX = event.touches[0].clientX;\n                this.controlCoordinates.pointerOffsetY = event.touches[0].clientY;\n                this.controlCoordinates.touchCount = event.touches.length;\n                this.controlCoordinates.touchmoveCount++;\n                if (this.controlCoordinates.touchCount > 1) /* Pinch */ {\n                    this.controlCoordinates.pointerOffsetX2 = event.touches[1].clientX;\n                    this.controlCoordinates.pointerOffsetY2 = event.touches[1].clientY;\n                    this.controlCoordinates.targetPinchDistance = Math.sqrt((this.controlCoordinates.pointerOffsetX - this.controlCoordinates.pointerOffsetX2) * (this.controlCoordinates.pointerOffsetX - this.controlCoordinates.pointerOffsetX2) + (this.controlCoordinates.pointerOffsetY - this.controlCoordinates.pointerOffsetY2) * (this.controlCoordinates.pointerOffsetY - this.controlCoordinates.pointerOffsetY2));\n                    if (this.controlCoordinates.initialPinchDistance === null) this.controlCoordinates.initialPinchDistance = this.controlCoordinates.targetPinchDistance;\n                    if (Math.abs(this.controlCoordinates.initialPinchDistance - this.controlCoordinates.targetPinchDistance) >= 1) {\n                        /* Initialize helpers */ this.controlCoordinates.targetScale = this.minMax(this.controlCoordinates.targetPinchDistance / this.controlCoordinates.initialPinchDistance * this.controlCoordinates.initialScale, 1, this.options.maxZoom);\n                        this.controlCoordinates.limitOffsetX = (this.controlCoordinates.imgWidth * this.controlCoordinates.targetScale - this.controlCoordinates.containerWidth) / 2;\n                        this.controlCoordinates.limitOffsetY = (this.controlCoordinates.imgHeight * this.controlCoordinates.targetScale - this.controlCoordinates.containerHeight) / 2;\n                        this.controlCoordinates.scaleDifference = this.controlCoordinates.targetScale - this.controlCoordinates.initialScale;\n                        this.controlCoordinates.targetOffsetX = this.controlCoordinates.imgWidth * this.controlCoordinates.targetScale <= this.controlCoordinates.containerWidth ? 0 : this.minMax(this.controlCoordinates.initialOffsetX - (this.controlCoordinates.pinchOffsetX - this.controlCoordinates.containerOffsetX - this.controlCoordinates.containerWidth / 2 - this.controlCoordinates.initialOffsetX) / (this.controlCoordinates.targetScale - this.controlCoordinates.scaleDifference) * this.controlCoordinates.scaleDifference, this.controlCoordinates.limitOffsetX * -1, this.controlCoordinates.limitOffsetX);\n                        this.controlCoordinates.targetOffsetY = this.controlCoordinates.imgHeight * this.controlCoordinates.targetScale <= this.controlCoordinates.containerHeight ? 0 : this.minMax(this.controlCoordinates.initialOffsetY - (this.controlCoordinates.pinchOffsetY - this.controlCoordinates.containerOffsetY - this.controlCoordinates.containerHeight / 2 - this.controlCoordinates.initialOffsetY) / (this.controlCoordinates.targetScale - this.controlCoordinates.scaleDifference) * this.controlCoordinates.scaleDifference, this.controlCoordinates.limitOffsetY * -1, this.controlCoordinates.limitOffsetY);\n                        this.zoomPanElement(this.controlCoordinates.targetOffsetX + \"px\", this.controlCoordinates.targetOffsetY + \"px\", this.controlCoordinates.targetScale);\n                        if (this.controlCoordinates.targetScale > 1) {\n                            this.controlCoordinates.zoomed = true;\n                            if ((!this.domNodes.caption.style.opacity || this.domNodes.caption.style.opacity > 0) && this.domNodes.caption.style.display !== \"none\") this.fadeOut(this.domNodes.caption, this.options.fadeSpeed);\n                        }\n                        this.controlCoordinates.initialPinchDistance = this.controlCoordinates.targetPinchDistance;\n                        this.controlCoordinates.initialScale = this.controlCoordinates.targetScale;\n                        this.controlCoordinates.initialOffsetX = this.controlCoordinates.targetOffsetX;\n                        this.controlCoordinates.initialOffsetY = this.controlCoordinates.targetOffsetY;\n                    }\n                } else {\n                    this.controlCoordinates.targetScale = this.controlCoordinates.initialScale;\n                    this.controlCoordinates.limitOffsetX = (this.controlCoordinates.imgWidth * this.controlCoordinates.targetScale - this.controlCoordinates.containerWidth) / 2;\n                    this.controlCoordinates.limitOffsetY = (this.controlCoordinates.imgHeight * this.controlCoordinates.targetScale - this.controlCoordinates.containerHeight) / 2;\n                    this.controlCoordinates.targetOffsetX = this.controlCoordinates.imgWidth * this.controlCoordinates.targetScale <= this.controlCoordinates.containerWidth ? 0 : this.minMax(this.controlCoordinates.pointerOffsetX - (this.controlCoordinates.initialPointerOffsetX - this.controlCoordinates.initialOffsetX), this.controlCoordinates.limitOffsetX * -1, this.controlCoordinates.limitOffsetX);\n                    this.controlCoordinates.targetOffsetY = this.controlCoordinates.imgHeight * this.controlCoordinates.targetScale <= this.controlCoordinates.containerHeight ? 0 : this.minMax(this.controlCoordinates.pointerOffsetY - (this.controlCoordinates.initialPointerOffsetY - this.controlCoordinates.initialOffsetY), this.controlCoordinates.limitOffsetY * -1, this.controlCoordinates.limitOffsetY);\n                    if (Math.abs(this.controlCoordinates.targetOffsetX) === Math.abs(this.controlCoordinates.limitOffsetX)) {\n                        this.controlCoordinates.initialOffsetX = this.controlCoordinates.targetOffsetX;\n                        this.controlCoordinates.initialPointerOffsetX = this.controlCoordinates.pointerOffsetX;\n                    }\n                    if (Math.abs(this.controlCoordinates.targetOffsetY) === Math.abs(this.controlCoordinates.limitOffsetY)) {\n                        this.controlCoordinates.initialOffsetY = this.controlCoordinates.targetOffsetY;\n                        this.controlCoordinates.initialPointerOffsetY = this.controlCoordinates.pointerOffsetY;\n                    }\n                    this.setZoomData(this.controlCoordinates.initialScale, this.controlCoordinates.targetOffsetX, this.controlCoordinates.targetOffsetY);\n                    this.zoomPanElement(this.controlCoordinates.targetOffsetX + \"px\", this.controlCoordinates.targetOffsetY + \"px\", this.controlCoordinates.targetScale);\n                }\n            }\n            /* Mouse Move implementation */ if (event.type === \"mousemove\" && this.controlCoordinates.mousedown) {\n                if (event.type == \"touchmove\") return true;\n                event.preventDefault();\n                if (this.controlCoordinates.capture === false) return false;\n                this.controlCoordinates.pointerOffsetX = event.clientX;\n                this.controlCoordinates.pointerOffsetY = event.clientY;\n                this.controlCoordinates.targetScale = this.controlCoordinates.initialScale;\n                this.controlCoordinates.limitOffsetX = (this.controlCoordinates.imgWidth * this.controlCoordinates.targetScale - this.controlCoordinates.containerWidth) / 2;\n                this.controlCoordinates.limitOffsetY = (this.controlCoordinates.imgHeight * this.controlCoordinates.targetScale - this.controlCoordinates.containerHeight) / 2;\n                this.controlCoordinates.targetOffsetX = this.controlCoordinates.imgWidth * this.controlCoordinates.targetScale <= this.controlCoordinates.containerWidth ? 0 : this.minMax(this.controlCoordinates.pointerOffsetX - (this.controlCoordinates.initialPointerOffsetX - this.controlCoordinates.initialOffsetX), this.controlCoordinates.limitOffsetX * -1, this.controlCoordinates.limitOffsetX);\n                this.controlCoordinates.targetOffsetY = this.controlCoordinates.imgHeight * this.controlCoordinates.targetScale <= this.controlCoordinates.containerHeight ? 0 : this.minMax(this.controlCoordinates.pointerOffsetY - (this.controlCoordinates.initialPointerOffsetY - this.controlCoordinates.initialOffsetY), this.controlCoordinates.limitOffsetY * -1, this.controlCoordinates.limitOffsetY);\n                if (Math.abs(this.controlCoordinates.targetOffsetX) === Math.abs(this.controlCoordinates.limitOffsetX)) {\n                    this.controlCoordinates.initialOffsetX = this.controlCoordinates.targetOffsetX;\n                    this.controlCoordinates.initialPointerOffsetX = this.controlCoordinates.pointerOffsetX;\n                }\n                if (Math.abs(this.controlCoordinates.targetOffsetY) === Math.abs(this.controlCoordinates.limitOffsetY)) {\n                    this.controlCoordinates.initialOffsetY = this.controlCoordinates.targetOffsetY;\n                    this.controlCoordinates.initialPointerOffsetY = this.controlCoordinates.pointerOffsetY;\n                }\n                this.setZoomData(this.controlCoordinates.initialScale, this.controlCoordinates.targetOffsetX, this.controlCoordinates.targetOffsetY);\n                this.zoomPanElement(this.controlCoordinates.targetOffsetX + \"px\", this.controlCoordinates.targetOffsetY + \"px\", this.controlCoordinates.targetScale);\n            }\n            if (!this.controlCoordinates.zoomed) {\n                this.controlCoordinates.swipeEnd = event.pageX || event.touches[0].pageX;\n                this.controlCoordinates.swipeYEnd = event.pageY || event.touches[0].pageY;\n                this.controlCoordinates.swipeDiff = this.controlCoordinates.swipeStart - this.controlCoordinates.swipeEnd;\n                this.controlCoordinates.swipeYDiff = this.controlCoordinates.swipeYStart - this.controlCoordinates.swipeYEnd;\n                if (this.options.animationSlide) this.slide(0, -this.controlCoordinates.swipeDiff + \"px\");\n            }\n        });\n        this.addEventListener(this.domNodes.image, [\n            \"touchend.\" + this.eventNamespace,\n            \"mouseup.\" + this.eventNamespace,\n            \"touchcancel.\" + this.eventNamespace,\n            \"mouseleave.\" + this.eventNamespace,\n            \"pointerup\",\n            \"pointercancel\",\n            \"MSPointerUp\",\n            \"MSPointerCancel\"\n        ], (event)=>{\n            if (this.isTouchDevice && event.type === \"touchend\") {\n                this.controlCoordinates.touchCount = event.touches.length;\n                if (this.controlCoordinates.touchCount === 0) /* No touch */ {\n                    /* Set attributes */ if (this.currentImage) this.setZoomData(this.controlCoordinates.initialScale, this.controlCoordinates.targetOffsetX, this.controlCoordinates.targetOffsetY);\n                    if (this.controlCoordinates.initialScale === 1) {\n                        this.controlCoordinates.zoomed = false;\n                        if (this.domNodes.caption.style.display === \"none\") this.fadeIn(this.domNodes.caption, this.options.fadeSpeed);\n                    }\n                    this.controlCoordinates.initialPinchDistance = null;\n                    this.controlCoordinates.capture = false;\n                } else if (this.controlCoordinates.touchCount === 1) /* Single touch */ {\n                    this.controlCoordinates.initialPointerOffsetX = event.touches[0].clientX;\n                    this.controlCoordinates.initialPointerOffsetY = event.touches[0].clientY;\n                } else if (this.controlCoordinates.touchCount > 1) this.controlCoordinates.initialPinchDistance = null;\n            }\n            if (this.controlCoordinates.mousedown) {\n                this.controlCoordinates.mousedown = false;\n                let possibleDir = true;\n                if (!this.options.loop) {\n                    if (this.currentImageIndex === 0 && this.controlCoordinates.swipeDiff < 0) possibleDir = false;\n                    if (this.currentImageIndex >= this.relatedElements.length - 1 && this.controlCoordinates.swipeDiff > 0) possibleDir = false;\n                }\n                if (Math.abs(this.controlCoordinates.swipeDiff) > this.options.swipeTolerance && possibleDir) this.loadImage(this.controlCoordinates.swipeDiff > 0 ? 1 : -1);\n                else if (this.options.animationSlide) this.slide(this.options.animationSpeed / 1000, \"0px\");\n                if (this.options.swipeClose && Math.abs(this.controlCoordinates.swipeYDiff) > 50 && Math.abs(this.controlCoordinates.swipeDiff) < this.options.swipeTolerance) this.close();\n            }\n        });\n        this.addEventListener(this.domNodes.image, [\n            \"dblclick\"\n        ], (event)=>{\n            if (this.isTouchDevice) return;\n            this.controlCoordinates.initialPointerOffsetX = event.clientX;\n            this.controlCoordinates.initialPointerOffsetY = event.clientY;\n            this.controlCoordinates.containerHeight = this.getDimensions(this.domNodes.image).height;\n            this.controlCoordinates.containerWidth = this.getDimensions(this.domNodes.image).width;\n            this.controlCoordinates.imgHeight = this.getDimensions(this.currentImage).height;\n            this.controlCoordinates.imgWidth = this.getDimensions(this.currentImage).width;\n            this.controlCoordinates.containerOffsetX = this.domNodes.image.offsetLeft;\n            this.controlCoordinates.containerOffsetY = this.domNodes.image.offsetTop;\n            this.currentImage.classList.add(\"sl-transition\");\n            if (!this.controlCoordinates.zoomed) {\n                this.controlCoordinates.initialScale = this.options.doubleTapZoom;\n                this.setZoomData(this.controlCoordinates.initialScale, 0, 0);\n                this.zoomPanElement(\"0px\", \"0px\", this.controlCoordinates.initialScale);\n                if ((!this.domNodes.caption.style.opacity || this.domNodes.caption.style.opacity > 0) && this.domNodes.caption.style.display !== \"none\") this.fadeOut(this.domNodes.caption, this.options.fadeSpeed);\n                this.controlCoordinates.zoomed = true;\n            } else {\n                this.controlCoordinates.initialScale = 1;\n                this.setZoomData(this.controlCoordinates.initialScale, 0, 0);\n                this.zoomPanElement(\"0px\", \"0px\", this.controlCoordinates.initialScale);\n                this.controlCoordinates.zoomed = false;\n                if (this.domNodes.caption.style.display === \"none\") this.fadeIn(this.domNodes.caption, this.options.fadeSpeed);\n            }\n            setTimeout(()=>{\n                if (this.currentImage) {\n                    this.currentImage.classList.remove(\"sl-transition\");\n                    this.currentImage.style[this.transitionPrefix + \"transform-origin\"] = null;\n                }\n            }, 200);\n            this.controlCoordinates.capture = true;\n            return false;\n        });\n    }\n    getDimensions(element) {\n        let styles = window.getComputedStyle(element), height = element.offsetHeight, width = element.offsetWidth, borderTopWidth = parseFloat(styles.borderTopWidth), borderBottomWidth = parseFloat(styles.borderBottomWidth), paddingTop = parseFloat(styles.paddingTop), paddingBottom = parseFloat(styles.paddingBottom), borderLeftWidth = parseFloat(styles.borderLeftWidth), borderRightWidth = parseFloat(styles.borderRightWidth), paddingLeft = parseFloat(styles.paddingLeft), paddingRight = parseFloat(styles.paddingRight);\n        return {\n            height: height - borderBottomWidth - borderTopWidth - paddingTop - paddingBottom,\n            width: width - borderLeftWidth - borderRightWidth - paddingLeft - paddingRight\n        };\n    }\n    updateHash() {\n        let newHash = \"pid=\" + (this.currentImageIndex + 1), newURL = window.location.href.split(\"#\")[0] + \"#\" + newHash;\n        this.hashReseted = false;\n        if (this.pushStateSupport) window.history[this.historyHasChanges ? \"replaceState\" : \"pushState\"](\"\", document.title, newURL);\n        else // what is the browser target of this?\n        if (this.historyHasChanges) window.location.replace(newURL);\n        else window.location.hash = newHash;\n        if (!this.historyHasChanges) this.urlChangedOnce = true;\n        this.historyHasChanges = true;\n    }\n    resetHash() {\n        this.hashReseted = true;\n        if (this.urlChangedOnce) history.back();\n        else if (this.pushStateSupport) history.pushState(\"\", document.title, window.location.pathname + window.location.search);\n        else window.location.hash = \"\";\n        //\n        //in case an history operation is still pending\n        clearTimeout(this.historyUpdateTimeout);\n    }\n    updateURL() {\n        clearTimeout(this.historyUpdateTimeout);\n        if (!this.historyHasChanges) this.updateHash(); // first time\n        else this.historyUpdateTimeout = setTimeout(this.updateHash.bind(this), 800);\n    }\n    setCaption(captionText, imageWidth) {\n        if (this.options.captions && captionText && captionText !== \"\" && typeof captionText !== \"undefined\") {\n            this.hide(this.domNodes.caption);\n            this.domNodes.caption.style.width = imageWidth + \"px\";\n            this.domNodes.caption.innerHTML = captionText;\n            this.domNodes.image.appendChild(this.domNodes.caption);\n            setTimeout(()=>{\n                this.fadeIn(this.domNodes.caption, this.options.fadeSpeed);\n            }, this.options.captionDelay);\n        }\n    }\n    slide(speed, pos) {\n        if (!this.transitionCapable) return this.domNodes.image.style.left = pos;\n        this.domNodes.image.style[this.transitionPrefix + \"transform\"] = \"translateX(\" + pos + \")\";\n        this.domNodes.image.style[this.transitionPrefix + \"transition\"] = this.transitionPrefix + \"transform \" + speed + \"s linear\";\n    }\n    getRelated(rel) {\n        let elems;\n        if (rel && rel !== false && rel !== \"nofollow\") elems = Array.from(this.elements).filter((element)=>element.getAttribute(\"rel\") === rel);\n        else elems = this.elements;\n        return elems;\n    }\n    openImage(element) {\n        element.dispatchEvent(new Event(\"show.\" + this.eventNamespace));\n        this.globalScrollbarWidth = this.getScrollbarWidth();\n        if (this.options.disableScroll) {\n            this.toggleScrollbar(\"hide\");\n            this.globalScrollbarWidth = 0;\n        }\n        if (this.options.htmlClass && this.options.htmlClass !== \"\") document.querySelector(\"html\").classList.add(this.options.htmlClass);\n        document.body.appendChild(this.domNodes.wrapper);\n        this.domNodes.wrapper.appendChild(this.domNodes.image);\n        if (this.options.overlay) document.body.appendChild(this.domNodes.overlay);\n        this.relatedElements = this.getRelated(element.rel);\n        if (this.options.showCounter) {\n            if (this.relatedElements.length == 1 && this.domNodes.wrapper.contains(this.domNodes.counter)) this.domNodes.wrapper.removeChild(this.domNodes.counter);\n            else if (this.relatedElements.length > 1 && !this.domNodes.wrapper.contains(this.domNodes.counter)) this.domNodes.wrapper.appendChild(this.domNodes.counter);\n        }\n        if (this.options.download && this.domNodes.download) this.domNodes.wrapper.appendChild(this.domNodes.download);\n        this.isAnimating = true;\n        this.currentImageIndex = this.relatedElements.indexOf(element);\n        let targetURL = element.getAttribute(this.options.sourceAttr);\n        this.currentImage = document.createElement(\"img\");\n        this.currentImage.style.display = \"none\";\n        this.currentImage.setAttribute(\"src\", targetURL);\n        this.currentImage.dataset.scale = 1;\n        this.currentImage.dataset.translateX = 0;\n        this.currentImage.dataset.translateY = 0;\n        if (this.loadedImages.indexOf(targetURL) === -1) this.loadedImages.push(targetURL);\n        this.domNodes.image.innerHTML = \"\";\n        this.domNodes.image.setAttribute(\"style\", \"\");\n        this.domNodes.image.appendChild(this.currentImage);\n        this.fadeIn(this.domNodes.overlay, this.options.fadeSpeed);\n        this.fadeIn([\n            this.domNodes.counter,\n            this.domNodes.navigation,\n            this.domNodes.closeButton,\n            this.domNodes.download\n        ], this.options.fadeSpeed);\n        this.show(this.domNodes.spinner);\n        this.domNodes.counter.querySelector(\".sl-current\").innerHTML = this.currentImageIndex + 1;\n        this.domNodes.counter.querySelector(\".sl-total\").innerHTML = this.relatedElements.length;\n        this.adjustImage();\n        if (this.options.preloading) this.preload();\n        setTimeout(()=>{\n            element.dispatchEvent(new Event(\"shown.\" + this.eventNamespace));\n        }, this.options.animationSpeed);\n    }\n    forceFocus() {\n        this.removeEventListener(document, \"focusin.\" + this.eventNamespace);\n        this.addEventListener(document, \"focusin.\" + this.eventNamespace, (event)=>{\n            if (document !== event.target && this.domNodes.wrapper !== event.target && !this.domNodes.wrapper.contains(event.target)) this.domNodes.wrapper.focus();\n        });\n    }\n    // utility\n    addEventListener(elements, events, callback, opts) {\n        elements = this.wrap(elements);\n        events = this.wrap(events);\n        for (let element of elements){\n            if (!element.namespaces) element.namespaces = {};\n             // save the namespaces addEventListener the DOM element itself\n            for (let event of events){\n                let options = opts || false;\n                let needsPassiveFix = [\n                    \"touchstart\",\n                    \"touchmove\",\n                    \"mousewheel\",\n                    \"DOMMouseScroll\"\n                ].indexOf(event.split(\".\")[0]) >= 0;\n                if (needsPassiveFix && this.isPassiveEventsSupported) {\n                    if (typeof options === \"object\") options.passive = true;\n                    else options = {\n                        passive: true\n                    };\n                }\n                element.namespaces[event] = callback;\n                element.addEventListener(event.split(\".\")[0], callback, options);\n            }\n        }\n    }\n    removeEventListener(elements, events) {\n        elements = this.wrap(elements);\n        events = this.wrap(events);\n        for (let element of elements){\n            for (let event of events)if (element.namespaces && element.namespaces[event]) {\n                element.removeEventListener(event.split(\".\")[0], element.namespaces[event]);\n                delete element.namespaces[event];\n            }\n        }\n    }\n    fadeOut(elements, duration, callback) {\n        elements = this.wrap(elements);\n        for (let element of elements)element.style.opacity = parseFloat(element) || window.getComputedStyle(element).getPropertyValue(\"opacity\");\n        this.isFadeIn = false;\n        let step = 16.66666 / (duration || this.options.fadeSpeed), fade = ()=>{\n            let currentOpacity = parseFloat(elements[0].style.opacity);\n            if ((currentOpacity -= step) < 0) {\n                for (let element of elements){\n                    element.style.display = \"none\";\n                    // element.style.opacity = '';\n                    element.style.opacity = 1;\n                }\n                callback && callback.call(this, elements);\n            } else {\n                for (let element of elements)element.style.opacity = currentOpacity;\n                requestAnimationFrame(fade);\n            }\n        };\n        fade();\n    }\n    fadeIn(elements, duration, callback, display) {\n        elements = this.wrap(elements);\n        for (let element of elements)if (element) {\n            element.style.opacity = 0;\n            element.style.display = display || \"block\";\n        }\n        this.isFadeIn = true;\n        let opacityTarget = parseFloat(elements[0].dataset.opacityTarget || 1), step = 16.66666 * opacityTarget / (duration || this.options.fadeSpeed), fade = ()=>{\n            let currentOpacity = parseFloat(elements[0].style.opacity);\n            if (!((currentOpacity += step) > opacityTarget)) {\n                for (let element of elements)if (element) element.style.opacity = currentOpacity;\n                if (!this.isFadeIn) return;\n                requestAnimationFrame(fade);\n            } else {\n                for (let element of elements)if (element) element.style.opacity = opacityTarget;\n                callback && callback.call(this, elements);\n            }\n        };\n        fade();\n    }\n    hide(elements) {\n        elements = this.wrap(elements);\n        for (let element of elements){\n            if (element.style.display != \"none\") element.dataset.initialDisplay = element.style.display;\n            element.style.display = \"none\";\n        }\n    }\n    show(elements, display) {\n        elements = this.wrap(elements);\n        for (let element of elements)element.style.display = element.dataset.initialDisplay || display || \"block\";\n    }\n    wrap(input) {\n        return typeof input[Symbol.iterator] === \"function\" && typeof input !== \"string\" ? input : [\n            input\n        ];\n    }\n    on(events, callback) {\n        events = this.wrap(events);\n        for (let element of this.elements){\n            if (!element.fullyNamespacedEvents) element.fullyNamespacedEvents = {};\n            for (let event of events){\n                element.fullyNamespacedEvents[event] = callback;\n                element.addEventListener(event, callback);\n            }\n        }\n        return this;\n    }\n    off(events) {\n        events = this.wrap(events);\n        for (let element of this.elements){\n            for (let event of events)if (typeof element.fullyNamespacedEvents !== \"undefined\" && event in element.fullyNamespacedEvents) element.removeEventListener(event, element.fullyNamespacedEvents[event]);\n        }\n        return this;\n    }\n    // api\n    open(elem, position = 0) {\n        elem = elem || this.elements[0];\n        if (typeof jQuery !== \"undefined\" && elem instanceof jQuery) elem = elem.get(0);\n        if (position > 0) elem = this.elements[position];\n        this.initialImageIndex = this.elements.indexOf(elem);\n        if (this.initialImageIndex > -1) this.openImage(elem);\n    }\n    openPosition(position) {\n        let elem = this.elements[position];\n        this.open(elem, position);\n    }\n    next() {\n        this.loadImage(1);\n    }\n    prev() {\n        this.loadImage(-1);\n    }\n    // get some useful data\n    getLighboxData() {\n        return {\n            currentImageIndex: this.currentImageIndex,\n            currentImage: this.currentImage,\n            globalScrollbarWidth: this.globalScrollbarWidth\n        };\n    }\n    //close is exposed anyways..\n    destroy() {\n        //remove all custom event listeners from elements\n        this.off([\n            \"close.\" + this.eventNamespace,\n            \"closed.\" + this.eventNamespace,\n            \"nextImageLoaded.\" + this.eventNamespace,\n            \"prevImageLoaded.\" + this.eventNamespace,\n            \"change.\" + this.eventNamespace,\n            \"nextDone.\" + this.eventNamespace,\n            \"prevDone.\" + this.eventNamespace,\n            \"error.\" + this.eventNamespace,\n            \"changed.\" + this.eventNamespace,\n            \"next.\" + this.eventNamespace,\n            \"prev.\" + this.eventNamespace,\n            \"show.\" + this.eventNamespace,\n            \"shown.\" + this.eventNamespace\n        ]);\n        this.removeEventListener(this.elements, \"click.\" + this.eventNamespace);\n        this.removeEventListener(document, \"focusin.\" + this.eventNamespace);\n        this.removeEventListener(document.body, \"contextmenu.\" + this.eventNamespace);\n        this.removeEventListener(document.body, \"keyup.\" + this.eventNamespace);\n        this.removeEventListener(this.domNodes.navigation.getElementsByTagName(\"button\"), \"click.\" + this.eventNamespace);\n        this.removeEventListener(this.domNodes.closeButton, \"click.\" + this.eventNamespace);\n        this.removeEventListener(window, \"resize.\" + this.eventNamespace);\n        this.removeEventListener(window, \"hashchange.\" + this.eventNamespace);\n        this.close();\n        if (this.isOpen) {\n            document.body.removeChild(this.domNodes.wrapper);\n            document.body.removeChild(this.domNodes.overlay);\n        }\n        this.elements = null;\n    }\n    refresh() {\n        if (!this.initialSelector) throw \"refreshing only works when you initialize using a selector!\";\n        let options = this.options, selector = this.initialSelector;\n        this.destroy();\n        this.constructor(selector, options);\n        return this;\n    }\n}\nvar $945867cc3302d81d$export$2e2bcd8739ae039 = $945867cc3302d81d$var$SimpleLightbox;\n$parcel$global.SimpleLightbox = $945867cc3302d81d$var$SimpleLightbox;\n\n\n//# sourceMappingURL=index.d7c5fa85.js.map\n","/*!\r\n\tBy André Rinas, www.andrerinas.de\r\n\tDocumentation, www.simplelightbox.com\r\n\tAvailable for use under the MIT License\r\n\tVersion 2.14.1\r\n*/\nclass SimpleLightbox {\n\n    defaultOptions = {\n        sourceAttr: 'href',\n        overlay: true,\n        overlayOpacity: 0.7,\n        spinner: true,\n        nav: true,\n        navText: ['&lsaquo;', '&rsaquo;'],\n        captions: true,\n        captionDelay: 0,\n        captionSelector: 'img',\n        captionType: 'attr',\n        captionsData: 'title',\n        captionPosition: 'bottom',\n        captionClass: '',\n        close: true,\n        closeText: '&times;',\n        swipeClose: true,\n        showCounter: true,\n        fileExt: 'png|jpg|jpeg|gif|webp',\n        animationSlide: true,\n        animationSpeed: 250,\n        preloading: true,\n        enableKeyboard: true,\n        loop: true,\n        rel: false,\n        docClose: true,\n        swipeTolerance: 50,\n        className: 'simple-lightbox',\n        widthRatio: 0.8,\n        heightRatio: 0.9,\n        scaleImageToRatio: false,\n        disableRightClick: false,\n        disableScroll: true,\n        alertError: true,\n        alertErrorMessage: 'Image not found, next image will be loaded',\n        additionalHtml: false,\n        history: true,\n        throttleInterval: 0,\n        doubleTapZoom: 2,\n        maxZoom: 10,\n        htmlClass: 'has-lightbox',\n        rtl: false,\n        fixedClass: 'sl-fixed',\n        fadeSpeed: 300,\n        uniqueImages: true,\n        focus: true,\n        scrollZoom: true,\n        scrollZoomFactor: 0.5,\n        download: false\n    };\n\n    transitionPrefix;\n    isPassiveEventsSupported;\n    transitionCapable = false;\n\n    isTouchDevice = ('ontouchstart' in window);\n    isAppleDevice = /(Mac|iPhone|iPod|iPad)/i.test(navigator.platform);\n\n    initialLocationHash;\n\n    pushStateSupport = ('pushState' in history);\n\n    isOpen = false;\n    isAnimating = false;\n    isClosing = false;\n    isFadeIn = false;\n    urlChangedOnce = false;\n    hashReseted = false;\n    historyHasChanges = false;\n    historyUpdateTimeout = null;\n\n    currentImage;\n    eventNamespace = 'simplelightbox';\n    domNodes = {};\n\n    loadedImages = [];\n    initialImageIndex = 0;\n    currentImageIndex = 0;\n\n    initialSelector = null;\n    globalScrollbarWidth = 0;\n\n    controlCoordinates = {\n        swipeDiff: 0,\n        swipeYDiff: 0,\n        swipeStart: 0,\n        swipeEnd: 0,\n        swipeYStart: 0,\n        swipeYEnd: 0,\n        mousedown: false,\n        imageLeft: 0,\n        zoomed: false,\n        containerHeight: 0,\n        containerWidth: 0,\n        containerOffsetX: 0,\n        containerOffsetY: 0,\n        imgHeight: 0,\n        imgWidth: 0,\n        capture: false,\n        initialOffsetX: 0,\n        initialOffsetY: 0,\n        initialPointerOffsetX: 0,\n        initialPointerOffsetY: 0,\n        initialPointerOffsetX2: 0,\n        initialPointerOffsetY2: 0,\n        initialScale: 1,\n        initialPinchDistance: 0,\n        pointerOffsetX: 0,\n        pointerOffsetY: 0,\n        pointerOffsetX2: 0,\n        pointerOffsetY2: 0,\n        targetOffsetX: 0,\n        targetOffsetY: 0,\n        targetScale: 0,\n        pinchOffsetX: 0,\n        pinchOffsetY: 0,\n        limitOffsetX: 0,\n        limitOffsetY: 0,\n        scaleDifference: 0,\n        targetPinchDistance: 0,\n        touchCount: 0,\n        doubleTapped: false,\n        touchmoveCount: 0\n    };\n\n    constructor(elements, options) {\n\n        this.options = Object.assign(this.defaultOptions, options);\n        this.isPassiveEventsSupported = this.checkPassiveEventsSupport();\n\n        if (typeof elements === 'string') {\n            this.initialSelector = elements;\n            this.elements = Array.from(document.querySelectorAll(elements));\n        } else {\n            this.elements = ((typeof elements.length !== 'undefined') && elements.length > 0) ? Array.from(elements) : [elements];\n        }\n\n        this.relatedElements = [];\n\n        this.transitionPrefix = this.calculateTransitionPrefix();\n        this.transitionCapable = this.transitionPrefix !== false;\n        this.initialLocationHash = this.hash;\n\n        // this should be handled by attribute selector IMHO! => 'a[rel=bla]'...\n        if (this.options.rel) {\n            this.elements = this.getRelated(this.options.rel);\n        }\n\n        if (this.options.uniqueImages) {\n            let imgArr = [];\n            this.elements = Array.from(this.elements).filter(\n                element => {\n                    let src = element.getAttribute(this.options.sourceAttr);\n                    if(imgArr.indexOf(src) === -1) {\n                        imgArr.push(src);\n                        return true;\n                    }\n                    return false;\n                }\n            );\n        }\n\n        this.createDomNodes();\n\n        if (this.options.close) {\n            this.domNodes.wrapper.appendChild(this.domNodes.closeButton);\n        }\n\n        if (this.options.nav) {\n            this.domNodes.wrapper.appendChild(this.domNodes.navigation);\n        }\n\n        if (this.options.spinner) {\n            this.domNodes.wrapper.appendChild(this.domNodes.spinner);\n        }\n\n        this.addEventListener(this.elements, 'click.' + this.eventNamespace, (event) => {\n\n            if (this.isValidLink(event.currentTarget)) {\n                event.preventDefault();\n                if (this.isAnimating) {\n                    return false;\n                }\n\n                this.initialImageIndex = this.elements.indexOf(event.currentTarget);\n                this.openImage(event.currentTarget);\n            }\n        });\n\n        // close addEventListener click addEventListener doc\n        if (this.options.docClose) {\n            this.addEventListener(this.domNodes.wrapper, ['click.' + this.eventNamespace, 'touchstart.' + this.eventNamespace], (event) => {\n                if (this.isOpen && event.target === event.currentTarget) {\n                    this.close();\n                }\n            });\n        }\n\n        // disable rightclick\n        if (this.options.disableRightClick) {\n            this.addEventListener(document.body, 'contextmenu.' + this.eventNamespace, (event) => {\n                if (event.target.parentElement.classList.contains(\"sl-image\")) {\n                    event.preventDefault();\n                }\n            });\n        }\n\n        // keyboard-control\n        if (this.options.enableKeyboard) {\n            this.addEventListener(document.body, 'keyup.' + this.eventNamespace, this.throttle((event) => {\n                this.controlCoordinates.swipeDiff = 0;\n                // keyboard control only if lightbox is open\n\n                if (this.isAnimating && event.key === 'Escape') {\n                    this.currentImage.setAttribute('src', '');\n                    this.isAnimating = false;\n                    this.close();\n                    return;\n                }\n\n                if (this.isOpen) {\n                    event.preventDefault();\n                    if (event.key === 'Escape') {\n                        this.close();\n                    }\n                    if(!this.isAnimating && ['ArrowLeft', 'ArrowRight'].indexOf(event.key) > -1) {\n                      this.loadImage(event.key === 'ArrowRight' ? 1 : -1);\n                    }\n                }\n            }, this.options.throttleInterval));\n        }\n\n        this.addEvents();\n    }\n\n    checkPassiveEventsSupport() {\n        // https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md#feature-detection\n        // Test via a getter in the options object to see if the passive property is accessed\n        let supportsPassive = false;\n        try {\n            let opts = Object.defineProperty({}, 'passive', {\n                get: function() {\n                    supportsPassive = true;\n                }\n            });\n            window.addEventListener(\"testPassive\", null, opts);\n            window.removeEventListener(\"testPassive\", null, opts);\n        } catch (e) {}\n        return supportsPassive;\n    }\n\n    getCaptionElement(elem) {\n        // look at sibling selector\n        if( this.options.captionSelector.startsWith('+')) {\n            let selector = this.options.captionSelector.replace(/^\\+/, '').trimStart();\n            let sibling = elem.nextElementSibling;\n            if(sibling.matches(selector)) {\n                return sibling;\n            }\n            return false;\n        }\n        else if( this.options.captionSelector.startsWith('>') ) {\n            let selector = this.options.captionSelector.replace(/^>/, '').trimStart();\n            return elem.querySelector(selector);\n        }\n        else {\n            return elem.querySelector(this.options.captionSelector);\n        }\n    }\n\n    generateQuerySelector(elem) {\n        const {\n            tagName,\n            id,\n            className,\n            parentNode\n        } = elem;\n\n        if (tagName === 'HTML') return 'HTML';\n\n        let str = tagName;\n\n        str += (id !== '') ? `#${id}` : '';\n\n        if (className) {\n            const classes = className.trim().split(/\\s/);\n            for (let i = 0; i < classes.length; i++) {\n                str += `.${classes[i]}`;\n            }\n        }\n\n        let childIndex = 1;\n\n        for (let e = elem; e.previousElementSibling; e = e.previousElementSibling) {\n            childIndex += 1;\n        }\n\n        str += `:nth-child(${childIndex})`;\n\n        return `${this.generateQuerySelector(parentNode)} > ${str}`;\n    }\n\n    createDomNodes() {\n        this.domNodes.overlay = document.createElement('div');\n        this.domNodes.overlay.classList.add('sl-overlay');\n        this.domNodes.overlay.dataset.opacityTarget = this.options.overlayOpacity;\n\n        this.domNodes.closeButton = document.createElement('button');\n        this.domNodes.closeButton.classList.add('sl-close');\n        this.domNodes.closeButton.innerHTML = this.options.closeText;\n\n        this.domNodes.spinner = document.createElement('div');\n        this.domNodes.spinner.classList.add('sl-spinner');\n        this.domNodes.spinner.innerHTML = '<div></div>';\n\n        this.domNodes.navigation = document.createElement('div');\n        this.domNodes.navigation.classList.add('sl-navigation');\n        this.domNodes.navigation.innerHTML = `<button class=\"sl-prev\">${this.options.navText[0]}</button><button class=\"sl-next\">${this.options.navText[1]}</button>`;\n\n        this.domNodes.counter = document.createElement('div');\n        this.domNodes.counter.classList.add('sl-counter');\n        this.domNodes.counter.innerHTML = '<span class=\"sl-current\"></span>/<span class=\"sl-total\"></span>';\n\n        this.domNodes.download = document.createElement('div');\n        this.domNodes.download.classList.add('sl-download');\n\n        this.domNodes.downloadLink = document.createElement('a');\n        this.domNodes.downloadLink.setAttribute('download', '');\n        this.domNodes.downloadLink.textContent = this.options.download;\n\n        this.domNodes.download.appendChild(this.domNodes.downloadLink);\n\n        this.domNodes.caption = document.createElement('div');\n        this.domNodes.caption.classList.add('sl-caption', 'pos-' + this.options.captionPosition);\n        if (this.options.captionClass) {\n            let captionClasses = this.options.captionClass.split(/[\\s,]+/);\n            this.domNodes.caption.classList.add(...captionClasses);\n        }\n\n        this.domNodes.image = document.createElement('div');\n        this.domNodes.image.classList.add('sl-image');\n\n        this.domNodes.wrapper = document.createElement('div');\n        this.domNodes.wrapper.classList.add('sl-wrapper');\n        this.domNodes.wrapper.setAttribute('tabindex',-1);\n        this.domNodes.wrapper.setAttribute('role','dialog');\n        this.domNodes.wrapper.setAttribute('aria-hidden',false);\n        if (this.options.className) {\n            this.domNodes.wrapper.classList.add(this.options.className);\n        }\n        if(this.options.rtl) {\n            this.domNodes.wrapper.classList.add('sl-dir-rtl');\n        }\n    }\n\n    throttle(func, limit) {\n        let inThrottle;\n        return function () {\n            if (!inThrottle) {\n                func.apply(this, arguments);\n                inThrottle = true;\n                setTimeout(function () {\n                    return inThrottle = false;\n                }, limit);\n            }\n        };\n    }\n\n    isValidLink(element) {\n        return (!this.options.fileExt) || (element.getAttribute(this.options.sourceAttr) && new RegExp('(' + this.options.fileExt + ')($|\\\\?.*$)', 'i').test(element.getAttribute(this.options.sourceAttr)));\n    }\n\n    calculateTransitionPrefix() {\n        let s = (document.body || document.documentElement).style;\n\n        return 'transition' in s ? '' :\n            'WebkitTransition' in s ? '-webkit-' :\n                'MozTransition' in s ? '-moz-' :\n                    'OTransition' in s ? '-o' :\n                        false;\n    }\n\n    getScrollbarWidth() {\n        let scrollbarWidth = 0;\n        let scrollDiv = document.createElement('div');\n        scrollDiv.classList.add('sl-scrollbar-measure');\n\n        document.body.appendChild(scrollDiv);\n        scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n        document.body.removeChild(scrollDiv);\n        return scrollbarWidth;\n    }\n\n    toggleScrollbar(type) {\n        let scrollbarWidth = 0;\n        let fixedElements =  [].slice.call(document.querySelectorAll('.'+this.options.fixedClass))\n        if (type === 'hide') {\n            let fullWindowWidth = window.innerWidth;\n            if (!fullWindowWidth) {\n                let documentElementRect = document.documentElement.getBoundingClientRect();\n                fullWindowWidth = documentElementRect.right - Math.abs(documentElementRect.left);\n            }\n            if (document.body.clientWidth < fullWindowWidth || this.isAppleDevice) {\n                let paddingRight = parseInt(window.getComputedStyle(document.body).paddingRight || 0, 10);\n                scrollbarWidth = this.getScrollbarWidth();\n                document.body.dataset.originalPaddingRight = paddingRight;\n                if (scrollbarWidth > 0 || (scrollbarWidth == 0 && this.isAppleDevice)) {\n                    document.body.classList.add('hidden-scroll');\n                    document.body.style.paddingRight = (paddingRight + scrollbarWidth) + 'px';\n\n                    fixedElements.forEach(element => {\n                        const actualPadding = element.style.paddingRight\n                        const calculatedPadding = window.getComputedStyle(element)['padding-right']\n                        element.dataset.originalPaddingRight = actualPadding;\n                        element.style.paddingRight = `${parseFloat(calculatedPadding) + scrollbarWidth}px`\n                    });\n\n                }\n            }\n        } else {\n            document.body.classList.remove('hidden-scroll');\n            document.body.style.paddingRight = document.body.dataset.originalPaddingRight + 'px';\n\n            fixedElements.forEach(element => {\n                const padding = element.dataset.originalPaddingRight;\n                if (typeof padding !== 'undefined') {\n                    element.style.paddingRight = padding\n                }\n            });\n        }\n        return scrollbarWidth;\n    }\n\n    close() {\n        if (!this.isOpen || this.isAnimating || this.isClosing) {\n            return false;\n        }\n\n        this.isClosing = true;\n        let element = this.relatedElements[this.currentImageIndex];\n        element.dispatchEvent(new Event('close.simplelightbox'));\n\n        if (this.options.history) {\n            this.historyHasChanges = false;\n            if(!this.hashReseted) {\n                this.resetHash();\n            }\n        }\n\n        this.removeEventListener(document, 'focusin.' + this.eventNamespace);\n\n        this.fadeOut(this.domNodes.overlay, this.options.fadeSpeed);\n        this.fadeOut(document.querySelectorAll('.sl-image img,  .sl-close, .sl-navigation, .sl-image .sl-caption, .sl-counter'), this.options.fadeSpeed, () => {\n            if (this.options.disableScroll) {\n                this.toggleScrollbar('show');\n            }\n\n            if (this.options.htmlClass && this.options.htmlClass !== '') {\n                document.querySelector('html').classList.remove(this.options.htmlClass);\n            }\n\n            document.body.removeChild(this.domNodes.wrapper);\n            if(this.options.overlay) {\n                document.body.removeChild(this.domNodes.overlay);\n            }\n            this.domNodes.additionalHtml = null;\n            this.domNodes.download = null;\n\n            element.dispatchEvent(new Event('closed.simplelightbox'));\n\n            this.isClosing = false;\n        });\n\n        this.currentImage = null;\n        this.isOpen = false;\n        this.isAnimating = false;\n\n        // reset touchcontrol coordinates\n        for (let key in this.controlCoordinates) {\n            this.controlCoordinates[key] = 0;\n        }\n        this.controlCoordinates.mousedown = false;\n        this.controlCoordinates.zoomed = false;\n        this.controlCoordinates.capture = false;\n        this.controlCoordinates.initialScale = this.minMax(1, 1, this.options.maxZoom);\n        this.controlCoordinates.doubleTapped = false;\n    }\n\n    get hash() {\n        return window.location.hash.substring(1);\n    }\n\n    preload() {\n        let index = this.currentImageIndex,\n            length = this.relatedElements.length,\n            next = (index + 1 < 0) ? length - 1 : (index + 1 >= length - 1) ? 0 : index + 1,\n            prev = (index - 1 < 0) ? length - 1 : (index - 1 >= length - 1) ? 0 : index - 1,\n            nextImage = new Image(),\n            prevImage = new Image();\n\n        nextImage.addEventListener('load', (event) => {\n            let src = event.target.getAttribute('src');\n            if (this.loadedImages.indexOf(src) === -1) { //is this condition even required... setting multiple times will not change usage...\n                this.loadedImages.push(src);\n            }\n            this.relatedElements[index].dispatchEvent(new Event('nextImageLoaded.' + this.eventNamespace));\n        });\n        nextImage.setAttribute('src', this.relatedElements[next].getAttribute(this.options.sourceAttr));\n\n        prevImage.addEventListener('load', (event) => {\n            let src = event.target.getAttribute('src');\n            if (this.loadedImages.indexOf(src) === -1) {\n                this.loadedImages.push(src);\n            }\n            this.relatedElements[index].dispatchEvent(new Event('prevImageLoaded.' + this.eventNamespace));\n        });\n        prevImage.setAttribute('src', this.relatedElements[prev].getAttribute(this.options.sourceAttr));\n    }\n\n    loadImage(direction) {\n        let slideDirection = direction;\n        if(this.options.rtl) {\n            direction = -direction;\n        }\n\n        this.relatedElements[this.currentImageIndex].dispatchEvent(new Event('change.' + this.eventNamespace));\n        this.relatedElements[this.currentImageIndex].dispatchEvent(new Event((direction === 1 ? 'next' : 'prev') + '.' + this.eventNamespace));\n\n        let newIndex = this.currentImageIndex + direction;\n\n        if (this.isAnimating || (newIndex < 0 || newIndex >= this.relatedElements.length) && this.options.loop === false) {\n            return false;\n        }\n\n        this.currentImageIndex = (newIndex < 0) ? this.relatedElements.length - 1 : (newIndex > this.relatedElements.length - 1) ? 0 : newIndex;\n\n        this.domNodes.counter.querySelector('.sl-current').innerHTML = this.currentImageIndex + 1;\n\n\n        if (this.options.animationSlide) {\n            this.slide(this.options.animationSpeed / 1000, (-100 * slideDirection) - this.controlCoordinates.swipeDiff + 'px');\n        }\n        this.fadeOut(this.domNodes.image, this.options.fadeSpeed, () => {\n            this.isAnimating = true;\n            if(!this.isClosing) {\n                setTimeout(() => {\n                    let element = this.relatedElements[this.currentImageIndex];\n                    if(!this.currentImage) return;\n                    this.currentImage.setAttribute('src', element.getAttribute(this.options.sourceAttr));\n\n                    if (this.loadedImages.indexOf(element.getAttribute(this.options.sourceAttr)) === -1) {\n                        this.show(this.domNodes.spinner);\n                    }\n\n                    if(this.domNodes.image.contains(this.domNodes.caption)) {\n                      this.domNodes.image.removeChild(this.domNodes.caption);\n                    }\n\n                    this.adjustImage(slideDirection);\n                    if (this.options.preloading) this.preload();\n                }, 100);\n            } else {\n                this.isAnimating = false;\n            }\n        });\n    }\n\n    adjustImage(direction) {\n        if (!this.currentImage) {\n            return false;\n        }\n\n        let tmpImage = new Image(),\n            windowWidth = window.innerWidth * this.options.widthRatio,\n            windowHeight = window.innerHeight * this.options.heightRatio;\n\n        tmpImage.setAttribute('src', this.currentImage.getAttribute('src'));\n\n        this.currentImage.dataset.scale = 1;\n        this.currentImage.dataset.translateX = 0;\n        this.currentImage.dataset.translateY = 0;\n        this.zoomPanElement(0, 0, 1);\n\n        tmpImage.addEventListener('error', (event) => {\n            this.relatedElements[this.currentImageIndex].dispatchEvent(new Event('error.' + this.eventNamespace));\n            this.isAnimating = false;\n            this.isOpen = true;\n            this.domNodes.spinner.style.display = 'none';\n\n            let dirIsDefined = direction === 1 || direction === -1;\n            if (this.initialImageIndex === this.currentImageIndex && dirIsDefined) {\n                return this.close();\n            }\n\n            if (this.options.alertError) {\n                alert(this.options.alertErrorMessage);\n            }\n\n            this.loadImage(dirIsDefined ? direction : 1);\n        });\n\n\n        tmpImage.addEventListener('load', (event) => {\n            if (typeof direction !== 'undefined') {\n                this.relatedElements[this.currentImageIndex].dispatchEvent(new Event('changed.' + this.eventNamespace));\n                this.relatedElements[this.currentImageIndex].dispatchEvent(new Event((direction === 1 ? 'nextDone' : 'prevDone') + '.' + this.eventNamespace));\n            }\n\n            // history\n            if (this.options.history) {\n                this.updateURL();\n            }\n\n            if (this.loadedImages.indexOf(this.currentImage.getAttribute('src')) === -1) {\n                this.loadedImages.push(this.currentImage.getAttribute('src'));\n            }\n\n            let imageWidth = event.target.width,\n                imageHeight = event.target.height;\n\n            if (this.options.scaleImageToRatio || imageWidth > windowWidth || imageHeight > windowHeight) {\n                let ratio = imageWidth / imageHeight > windowWidth / windowHeight ? imageWidth / windowWidth : imageHeight / windowHeight;\n                imageWidth /= ratio;\n                imageHeight /= ratio;\n            }\n\n            this.domNodes.image.style.top = (window.innerHeight - imageHeight) / 2 + 'px';\n            this.domNodes.image.style.left = (window.innerWidth - imageWidth - this.globalScrollbarWidth) / 2 + 'px';\n            this.domNodes.image.style.width = imageWidth + 'px';\n            this.domNodes.image.style.height = imageHeight + 'px';\n\n            this.domNodes.spinner.style.display = 'none';\n            if( this.options.focus ) {\n                this.forceFocus();\n            }\n            this.fadeIn(this.currentImage, this.options.fadeSpeed, () => {\n                if( this.options.focus ) {\n                    this.domNodes.wrapper.focus();\n                }\n            });\n\n            this.isOpen = true;\n\n            let captionContainer,\n                captionText;\n\n            if (typeof this.options.captionSelector === 'string') {\n                captionContainer = this.options.captionSelector === 'self'\n                    ? this.relatedElements[this.currentImageIndex]\n                    : this.getCaptionElement(this.relatedElements[this.currentImageIndex]);\n            } else if (typeof this.options.captionSelector === 'function') {\n                captionContainer = this.options.captionSelector(this.relatedElements[this.currentImageIndex]);\n            }\n\n            if(this.options.captions && captionContainer) {\n                if (this.options.captionType === 'data') {\n                    captionText = captionContainer.dataset[this.options.captionsData];\n                } else if (this.options.captionType === 'text') {\n                    captionText = captionContainer.innerHTML;\n                } else {\n                    captionText = captionContainer.getAttribute(this.options.captionsData);\n                }\n            }\n\n            if (!this.options.loop) {\n                if (this.currentImageIndex === 0) {\n                    this.hide(this.domNodes.navigation.querySelector('.sl-prev'));\n                }\n                if (this.currentImageIndex >= this.relatedElements.length - 1) {\n                    this.hide(this.domNodes.navigation.querySelector('.sl-next'));\n                }\n                if (this.currentImageIndex > 0) {\n                    this.show(this.domNodes.navigation.querySelector('.sl-prev'));\n                }\n                if (this.currentImageIndex < this.relatedElements.length - 1) {\n                    this.show(this.domNodes.navigation.querySelector('.sl-next'));\n                }\n            } else {\n                if (this.relatedElements.length === 1) {\n                    this.hide(this.domNodes.navigation.querySelectorAll('.sl-prev, .sl-next'));\n                } else {\n                    this.show(this.domNodes.navigation.querySelectorAll('.sl-prev, .sl-next'));\n                }\n            }\n\n\n            if (direction === 1 || direction === -1) {\n                if (this.options.animationSlide) {\n                    this.slide(0, 100 * direction + 'px');\n                    setTimeout(() => {\n                        this.slide(this.options.animationSpeed / 1000, 0 + 'px');\n                    }, 50);\n                }\n                this.fadeIn(this.domNodes.image, this.options.fadeSpeed, () => {\n                    this.isAnimating = false;\n                    this.setCaption(captionText, imageWidth);\n                });\n\n            } else {\n                this.isAnimating = false;\n                this.setCaption(captionText, imageWidth);\n            }\n\n            if (this.options.additionalHtml && !this.domNodes.additionalHtml) {\n                this.domNodes.additionalHtml = document.createElement('div');\n                this.domNodes.additionalHtml.classList.add('sl-additional-html');\n                this.domNodes.additionalHtml.innerHTML = this.options.additionalHtml;\n                this.domNodes.image.appendChild(this.domNodes.additionalHtml);\n            }\n\n            if (this.options.download) {\n                this.domNodes.downloadLink.setAttribute('href', this.currentImage.getAttribute('src'));\n            }\n\n        });\n    }\n\n    zoomPanElement(targetOffsetX, targetOffsetY, targetScale) {\n\n        this.currentImage.style[this.transitionPrefix + 'transform'] = 'translate(' + targetOffsetX + ',' + targetOffsetY + ') scale(' + targetScale + ')';\n\n    };\n\n    minMax(value, min, max) {\n        return (value < min) ? min : (value > max) ? max : value;\n    };\n\n    setZoomData(initialScale, targetOffsetX, targetOffsetY) {\n        this.currentImage.dataset.scale = initialScale;\n        this.currentImage.dataset.translateX = targetOffsetX;\n        this.currentImage.dataset.translateY = targetOffsetY;\n    };\n\n\n    hashchangeHandler() {\n        if (this.isOpen && this.hash === this.initialLocationHash) {\n            this.hashReseted = true;\n            this.close();\n        }\n    }\n\n    addEvents() {\n\n        // resize/responsive\n        this.addEventListener(window, 'resize.' + this.eventNamespace, (event) => {\n            //this.adjustImage.bind(this)\n            if (this.isOpen) {\n                this.adjustImage();\n            }\n        });\n\n        this.addEventListener(this.domNodes.closeButton, ['click.' + this.eventNamespace, 'touchstart.' + this.eventNamespace], this.close.bind(this));\n\n        if (this.options.history) {\n            setTimeout(() => {\n                this.addEventListener(window, 'hashchange.' + this.eventNamespace, (event) => {\n                    if (this.isOpen) {\n                        this.hashchangeHandler();\n                    }\n                });\n            }, 40);\n        }\n\n        this.addEventListener(this.domNodes.navigation.getElementsByTagName('button'), 'click.' + this.eventNamespace, (event) => {\n            if (!event.currentTarget.tagName.match(/button/i)) {\n                return true;\n            }\n\n            event.preventDefault();\n            this.controlCoordinates.swipeDiff = 0;\n            this.loadImage(event.currentTarget.classList.contains('sl-next') ? 1 : -1);\n        });\n\n        if (this.options.scrollZoom) {\n            let scale = 1\n\n            this.addEventListener(this.domNodes.image, ['mousewheel','DOMMouseScroll'], (event) => {\n                if (this.controlCoordinates.mousedown || this.isAnimating || this.isClosing || !this.isOpen) {\n                    return true;\n                }\n                if(this.controlCoordinates.containerHeight == 0) {\n                    this.controlCoordinates.containerHeight = this.getDimensions(this.domNodes.image).height;\n                    this.controlCoordinates.containerWidth = this.getDimensions(this.domNodes.image).width;\n                    this.controlCoordinates.imgHeight = this.getDimensions(this.currentImage).height;\n                    this.controlCoordinates.imgWidth = this.getDimensions(this.currentImage).width;\n                    this.controlCoordinates.containerOffsetX = this.domNodes.image.offsetLeft;\n                    this.controlCoordinates.containerOffsetY = this.domNodes.image.offsetTop;\n\n                    this.controlCoordinates.initialOffsetX = parseFloat(this.currentImage.dataset.translateX);\n                    this.controlCoordinates.initialOffsetY = parseFloat(this.currentImage.dataset.translateY);\n                }\n                // event.preventDefault();\n\n                let delta = event.delta || event.wheelDelta;\n                if (delta === undefined) {\n                    //we are on firefox\n                    delta = event.detail;\n                }\n                delta = Math.max(-1,Math.min(1,delta)); // cap the delta to [-1,1] for cross browser consistency\n\n                // apply zoom\n                scale += delta * this.options.scrollZoomFactor * scale;\n                scale = Math.max(1, Math.min( this.options.maxZoom, scale));\n\n                this.controlCoordinates.targetScale = scale;\n\n                let scrollTopPos = document.documentElement.scrollTop || document.body.scrollTop;\n\n                this.controlCoordinates.pinchOffsetX = event.pageX;\n                this.controlCoordinates.pinchOffsetY = event.pageY - scrollTopPos || 0; // need to substract the scroll position\n\n                this.controlCoordinates.limitOffsetX = ((this.controlCoordinates.imgWidth * this.controlCoordinates.targetScale) - this.controlCoordinates.containerWidth) / 2;\n                this.controlCoordinates.limitOffsetY = ((this.controlCoordinates.imgHeight * this.controlCoordinates.targetScale) - this.controlCoordinates.containerHeight) / 2;\n                this.controlCoordinates.scaleDifference = this.controlCoordinates.targetScale - this.controlCoordinates.initialScale;\n                this.controlCoordinates.targetOffsetX = (this.controlCoordinates.imgWidth * this.controlCoordinates.targetScale) <= this.controlCoordinates.containerWidth ? 0 : this.minMax(this.controlCoordinates.initialOffsetX - ((((((this.controlCoordinates.pinchOffsetX - this.controlCoordinates.containerOffsetX) - (this.controlCoordinates.containerWidth / 2)) - this.controlCoordinates.initialOffsetX) / (this.controlCoordinates.targetScale - this.controlCoordinates.scaleDifference))) * this.controlCoordinates.scaleDifference), this.controlCoordinates.limitOffsetX * (-1), this.controlCoordinates.limitOffsetX);\n                this.controlCoordinates.targetOffsetY = (this.controlCoordinates.imgHeight * this.controlCoordinates.targetScale) <= this.controlCoordinates.containerHeight ? 0 : this.minMax(this.controlCoordinates.initialOffsetY - ((((((this.controlCoordinates.pinchOffsetY - this.controlCoordinates.containerOffsetY) - (this.controlCoordinates.containerHeight / 2)) - this.controlCoordinates.initialOffsetY) / (this.controlCoordinates.targetScale - this.controlCoordinates.scaleDifference))) * this.controlCoordinates.scaleDifference), this.controlCoordinates.limitOffsetY * (-1), this.controlCoordinates.limitOffsetY);\n\n                this.zoomPanElement(this.controlCoordinates.targetOffsetX + \"px\", this.controlCoordinates.targetOffsetY + \"px\", this.controlCoordinates.targetScale);\n\n                if (this.controlCoordinates.targetScale > 1) {\n                    this.controlCoordinates.zoomed = true;\n                    if ( (!this.domNodes.caption.style.opacity || this.domNodes.caption.style.opacity > 0) && this.domNodes.caption.style.display !== 'none') {\n                        this.fadeOut(this.domNodes.caption, this.options.fadeSpeed);\n                    }\n                } else {\n                    if (this.controlCoordinates.initialScale === 1) {\n                        this.controlCoordinates.zoomed = false;\n                        if (this.domNodes.caption.style.display === 'none') {\n                            this.fadeIn(this.domNodes.caption, this.options.fadeSpeed);\n                        }\n                    }\n                    this.controlCoordinates.initialPinchDistance = null;\n                    this.controlCoordinates.capture = false;\n                }\n\n                this.controlCoordinates.initialPinchDistance = this.controlCoordinates.targetPinchDistance;\n                this.controlCoordinates.initialScale = this.controlCoordinates.targetScale;\n                this.controlCoordinates.initialOffsetX = this.controlCoordinates.targetOffsetX;\n                this.controlCoordinates.initialOffsetY = this.controlCoordinates.targetOffsetY;\n\n                this.setZoomData(this.controlCoordinates.targetScale, this.controlCoordinates.targetOffsetX, this.controlCoordinates.targetOffsetY);\n                this.zoomPanElement(this.controlCoordinates.targetOffsetX + \"px\", this.controlCoordinates.targetOffsetY + \"px\", this.controlCoordinates.targetScale);\n\n            });\n        }\n\n        this.addEventListener(this.domNodes.image, ['touchstart.' + this.eventNamespace, 'mousedown.' + this.eventNamespace], (event) => {\n            if (event.target.tagName === 'A' && event.type === 'touchstart') {\n                return true;\n            }\n\n            if (event.type === 'mousedown') {\n                event.preventDefault();\n                this.controlCoordinates.initialPointerOffsetX = event.clientX;\n                this.controlCoordinates.initialPointerOffsetY = event.clientY;\n                this.controlCoordinates.containerHeight = this.getDimensions(this.domNodes.image).height;\n                this.controlCoordinates.containerWidth = this.getDimensions(this.domNodes.image).width;\n                this.controlCoordinates.imgHeight = this.getDimensions(this.currentImage).height;\n                this.controlCoordinates.imgWidth = this.getDimensions(this.currentImage).width;\n                this.controlCoordinates.containerOffsetX = this.domNodes.image.offsetLeft;\n                this.controlCoordinates.containerOffsetY = this.domNodes.image.offsetTop;\n\n                this.controlCoordinates.initialOffsetX = parseFloat(this.currentImage.dataset.translateX);\n                this.controlCoordinates.initialOffsetY = parseFloat(this.currentImage.dataset.translateY);\n                this.controlCoordinates.capture = true;\n            } else {\n                this.controlCoordinates.touchCount = event.touches.length;\n                this.controlCoordinates.initialPointerOffsetX = event.touches[0].clientX;\n                this.controlCoordinates.initialPointerOffsetY = event.touches[0].clientY;\n                this.controlCoordinates.containerHeight = this.getDimensions(this.domNodes.image).height;\n                this.controlCoordinates.containerWidth = this.getDimensions(this.domNodes.image).width;\n                this.controlCoordinates.imgHeight = this.getDimensions(this.currentImage).height;\n                this.controlCoordinates.imgWidth = this.getDimensions(this.currentImage).width;\n                this.controlCoordinates.containerOffsetX = this.domNodes.image.offsetLeft;\n                this.controlCoordinates.containerOffsetY = this.domNodes.image.offsetTop;\n\n                if (this.controlCoordinates.touchCount === 1) /* Single touch */ {\n                    if (!this.controlCoordinates.doubleTapped) {\n                        this.controlCoordinates.doubleTapped = true;\n                        setTimeout(() => {\n                            this.controlCoordinates.doubleTapped = false;\n                        }, 300);\n                    } else {\n\n                        this.currentImage.classList.add('sl-transition');\n                        if (!this.controlCoordinates.zoomed) {\n                            this.controlCoordinates.initialScale = this.options.doubleTapZoom;\n                            this.setZoomData(this.controlCoordinates.initialScale,0, 0);\n                            this.zoomPanElement(0 + \"px\", 0 + \"px\", this.controlCoordinates.initialScale);\n\n\n                            if ( (!this.domNodes.caption.style.opacity || this.domNodes.caption.style.opacity > 0) && this.domNodes.caption.style.display !== 'none') {\n                                this.fadeOut(this.domNodes.caption, this.options.fadeSpeed);\n                            }\n\n                            this.controlCoordinates.zoomed = true;\n                        } else {\n                            this.controlCoordinates.initialScale = 1;\n                            this.setZoomData(this.controlCoordinates.initialScale,0, 0);\n                            this.zoomPanElement(0 + \"px\", 0 + \"px\", this.controlCoordinates.initialScale);\n                            this.controlCoordinates.zoomed = false;\n                        }\n\n                        setTimeout(() => {\n                            if (this.currentImage) {\n                                this.currentImage.classList.remove('sl-transition');\n                            }\n                        }, 200);\n                        return false;\n                    }\n\n                    this.controlCoordinates.initialOffsetX  = parseFloat(this.currentImage.dataset.translateX);\n                    this.controlCoordinates.initialOffsetY = parseFloat(this.currentImage.dataset.translateY);\n                }\n                else if (this.controlCoordinates.touchCount === 2) /* Pinch */ {\n                    this.controlCoordinates.initialPointerOffsetX2 = event.touches[1].clientX;\n                    this.controlCoordinates.initialPointerOffsetY2 = event.touches[1].clientY;\n                    this.controlCoordinates.initialOffsetX = parseFloat(this.currentImage.dataset.translateX);\n                    this.controlCoordinates.initialOffsetY = parseFloat(this.currentImage.dataset.translateY);\n                    this.controlCoordinates.pinchOffsetX = (this.controlCoordinates.initialPointerOffsetX + this.controlCoordinates.initialPointerOffsetX2) / 2;\n                    this.controlCoordinates.pinchOffsetY = (this.controlCoordinates.initialPointerOffsetY + this.controlCoordinates.initialPointerOffsetY2) / 2;\n                    this.controlCoordinates.initialPinchDistance = Math.sqrt(((this.controlCoordinates.initialPointerOffsetX - this.controlCoordinates.initialPointerOffsetX2) * (this.controlCoordinates.initialPointerOffsetX - this.controlCoordinates.initialPointerOffsetX2)) + ((this.controlCoordinates.initialPointerOffsetY - this.controlCoordinates.initialPointerOffsetY2) * (this.controlCoordinates.initialPointerOffsetY - this.controlCoordinates.initialPointerOffsetY2)));\n                }\n                this.controlCoordinates.capture = true;\n            }\n            if(this.controlCoordinates.mousedown) return true;\n            if (this.transitionCapable) {\n                this.controlCoordinates.imageLeft = parseInt(this.domNodes.image.style.left, 10);\n            }\n            this.controlCoordinates.mousedown = true;\n            this.controlCoordinates.swipeDiff = 0;\n            this.controlCoordinates.swipeYDiff = 0;\n            this.controlCoordinates.swipeStart = event.pageX || event.touches[0].pageX;\n            this.controlCoordinates.swipeYStart = event.pageY || event.touches[0].pageY;\n\n            return false;\n        });\n\n        this.addEventListener(this.domNodes.image, ['touchmove.' + this.eventNamespace, 'mousemove.' + this.eventNamespace, 'MSPointerMove'], (event) => {\n\n\n            if (!this.controlCoordinates.mousedown) {\n                return true;\n            }\n\n            if (event.type === 'touchmove') {\n                if (this.controlCoordinates.capture === false) {\n                    return false;\n                }\n\n                this.controlCoordinates.pointerOffsetX = event.touches[0].clientX;\n                this.controlCoordinates.pointerOffsetY = event.touches[0].clientY;\n                this.controlCoordinates.touchCount = event.touches.length;\n                this.controlCoordinates.touchmoveCount++;\n\n                if (this.controlCoordinates.touchCount > 1) /* Pinch */ {\n                    this.controlCoordinates.pointerOffsetX2 = event.touches[1].clientX;\n                    this.controlCoordinates.pointerOffsetY2 = event.touches[1].clientY;\n                    this.controlCoordinates.targetPinchDistance = Math.sqrt(((this.controlCoordinates.pointerOffsetX - this.controlCoordinates.pointerOffsetX2) * (this.controlCoordinates.pointerOffsetX - this.controlCoordinates.pointerOffsetX2)) + ((this.controlCoordinates.pointerOffsetY - this.controlCoordinates.pointerOffsetY2) * (this.controlCoordinates.pointerOffsetY - this.controlCoordinates.pointerOffsetY2)));\n                    if (this.controlCoordinates.initialPinchDistance === null) {\n                        this.controlCoordinates.initialPinchDistance = this.controlCoordinates.targetPinchDistance;\n                    }\n\n                    if (Math.abs(this.controlCoordinates.initialPinchDistance - this.controlCoordinates.targetPinchDistance) >= 1) {\n                        /* Initialize helpers */\n                        this.controlCoordinates.targetScale = this.minMax(this.controlCoordinates.targetPinchDistance / this.controlCoordinates.initialPinchDistance * this.controlCoordinates.initialScale, 1, this.options.maxZoom);\n                        this.controlCoordinates.limitOffsetX = ((this.controlCoordinates.imgWidth * this.controlCoordinates.targetScale) - this.controlCoordinates.containerWidth) / 2;\n                        this.controlCoordinates.limitOffsetY = ((this.controlCoordinates.imgHeight * this.controlCoordinates.targetScale) - this.controlCoordinates.containerHeight) / 2;\n                        this.controlCoordinates.scaleDifference = this.controlCoordinates.targetScale - this.controlCoordinates.initialScale;\n                        this.controlCoordinates.targetOffsetX = (this.controlCoordinates.imgWidth * this.controlCoordinates.targetScale) <= this.controlCoordinates.containerWidth ? 0 : this.minMax(this.controlCoordinates.initialOffsetX - ((((((this.controlCoordinates.pinchOffsetX - this.controlCoordinates.containerOffsetX) - (this.controlCoordinates.containerWidth / 2)) - this.controlCoordinates.initialOffsetX) / (this.controlCoordinates.targetScale - this.controlCoordinates.scaleDifference))) * this.controlCoordinates.scaleDifference), this.controlCoordinates.limitOffsetX * (-1), this.controlCoordinates.limitOffsetX);\n                        this.controlCoordinates.targetOffsetY = (this.controlCoordinates.imgHeight * this.controlCoordinates.targetScale) <= this.controlCoordinates.containerHeight ? 0 : this.minMax(this.controlCoordinates.initialOffsetY - ((((((this.controlCoordinates.pinchOffsetY - this.controlCoordinates.containerOffsetY) - (this.controlCoordinates.containerHeight / 2)) - this.controlCoordinates.initialOffsetY) / (this.controlCoordinates.targetScale - this.controlCoordinates.scaleDifference))) * this.controlCoordinates.scaleDifference), this.controlCoordinates.limitOffsetY * (-1), this.controlCoordinates.limitOffsetY);\n\n                        this.zoomPanElement(this.controlCoordinates.targetOffsetX + \"px\", this.controlCoordinates.targetOffsetY + \"px\", this.controlCoordinates.targetScale);\n\n                        if (this.controlCoordinates.targetScale > 1) {\n                            this.controlCoordinates.zoomed = true;\n                            if ((!this.domNodes.caption.style.opacity || this.domNodes.caption.style.opacity > 0) && this.domNodes.caption.style.display !== 'none') {\n                                this.fadeOut(this.domNodes.caption, this.options.fadeSpeed);\n                            }\n                        }\n\n                        this.controlCoordinates.initialPinchDistance = this.controlCoordinates.targetPinchDistance;\n                        this.controlCoordinates.initialScale = this.controlCoordinates.targetScale;\n                        this.controlCoordinates.initialOffsetX = this.controlCoordinates.targetOffsetX;\n                        this.controlCoordinates.initialOffsetY = this.controlCoordinates.targetOffsetY;\n                    }\n                } else {\n                    this.controlCoordinates.targetScale = this.controlCoordinates.initialScale;\n                    this.controlCoordinates.limitOffsetX = ((this.controlCoordinates.imgWidth * this.controlCoordinates.targetScale) - this.controlCoordinates.containerWidth) / 2;\n                    this.controlCoordinates.limitOffsetY = ((this.controlCoordinates.imgHeight * this.controlCoordinates.targetScale) - this.controlCoordinates.containerHeight) / 2;\n                    this.controlCoordinates.targetOffsetX = (this.controlCoordinates.imgWidth * this.controlCoordinates.targetScale) <= this.controlCoordinates.containerWidth ? 0 : this.minMax(this.controlCoordinates.pointerOffsetX - (this.controlCoordinates.initialPointerOffsetX - this.controlCoordinates.initialOffsetX), this.controlCoordinates.limitOffsetX * (-1), this.controlCoordinates.limitOffsetX);\n                    this.controlCoordinates.targetOffsetY = (this.controlCoordinates.imgHeight * this.controlCoordinates.targetScale) <= this.controlCoordinates.containerHeight ? 0 : this.minMax(this.controlCoordinates.pointerOffsetY - (this.controlCoordinates.initialPointerOffsetY - this.controlCoordinates.initialOffsetY), this.controlCoordinates.limitOffsetY * (-1), this.controlCoordinates.limitOffsetY);\n\n                    if (Math.abs(this.controlCoordinates.targetOffsetX) === Math.abs(this.controlCoordinates.limitOffsetX)) {\n                        this.controlCoordinates.initialOffsetX = this.controlCoordinates.targetOffsetX;\n                        this.controlCoordinates.initialPointerOffsetX = this.controlCoordinates.pointerOffsetX;\n                    }\n\n                    if (Math.abs(this.controlCoordinates.targetOffsetY) === Math.abs(this.controlCoordinates.limitOffsetY)) {\n                        this.controlCoordinates.initialOffsetY = this.controlCoordinates.targetOffsetY;\n                        this.controlCoordinates.initialPointerOffsetY = this.controlCoordinates.pointerOffsetY;\n                    }\n\n                    this.setZoomData(this.controlCoordinates.initialScale, this.controlCoordinates.targetOffsetX, this.controlCoordinates.targetOffsetY);\n                    this.zoomPanElement(this.controlCoordinates.targetOffsetX + \"px\", this.controlCoordinates.targetOffsetY + \"px\", this.controlCoordinates.targetScale);\n                }\n            }\n\n            /* Mouse Move implementation */\n            if (event.type === 'mousemove' && this.controlCoordinates.mousedown) {\n              if(event.type == 'touchmove') return true;\n\n                event.preventDefault();\n\n              if(this.controlCoordinates.capture === false) return false;\n\n              this.controlCoordinates.pointerOffsetX = event.clientX;\n              this.controlCoordinates.pointerOffsetY = event.clientY;\n\n              this.controlCoordinates.targetScale = this.controlCoordinates.initialScale;\n              this.controlCoordinates.limitOffsetX = ((this.controlCoordinates.imgWidth * this.controlCoordinates.targetScale) - this.controlCoordinates.containerWidth) / 2;\n              this.controlCoordinates.limitOffsetY = ((this.controlCoordinates.imgHeight * this.controlCoordinates.targetScale) - this.controlCoordinates.containerHeight) / 2;\n              this.controlCoordinates.targetOffsetX = (this.controlCoordinates.imgWidth * this.controlCoordinates.targetScale) <= this.controlCoordinates.containerWidth ? 0 : this.minMax(this.controlCoordinates.pointerOffsetX - (this.controlCoordinates.initialPointerOffsetX - this.controlCoordinates.initialOffsetX), this.controlCoordinates.limitOffsetX * (-1), this.controlCoordinates.limitOffsetX);\n              this.controlCoordinates.targetOffsetY = (this.controlCoordinates.imgHeight * this.controlCoordinates.targetScale) <= this.controlCoordinates.containerHeight ? 0 : this.minMax(this.controlCoordinates.pointerOffsetY - (this.controlCoordinates.initialPointerOffsetY - this.controlCoordinates.initialOffsetY), this.controlCoordinates.limitOffsetY * (-1), this.controlCoordinates.limitOffsetY);\n\n              if (Math.abs(this.controlCoordinates.targetOffsetX) === Math.abs(this.controlCoordinates.limitOffsetX)) {\n                  this.controlCoordinates.initialOffsetX = this.controlCoordinates.targetOffsetX;\n                  this.controlCoordinates.initialPointerOffsetX = this.controlCoordinates.pointerOffsetX;\n              }\n\n              if (Math.abs(this.controlCoordinates.targetOffsetY) === Math.abs(this.controlCoordinates.limitOffsetY)) {\n                  this.controlCoordinates.initialOffsetY = this.controlCoordinates.targetOffsetY;\n                  this.controlCoordinates.initialPointerOffsetY = this.controlCoordinates.pointerOffsetY;\n              }\n\n              this.setZoomData(this.controlCoordinates.initialScale, this.controlCoordinates.targetOffsetX, this.controlCoordinates.targetOffsetY);\n              this.zoomPanElement(this.controlCoordinates.targetOffsetX + \"px\", this.controlCoordinates.targetOffsetY + \"px\", this.controlCoordinates.targetScale);\n\n            }\n\n            if (!this.controlCoordinates.zoomed) {\n\n                this.controlCoordinates.swipeEnd = event.pageX || event.touches[0].pageX;\n                this.controlCoordinates.swipeYEnd = event.pageY || event.touches[0].pageY;\n                this.controlCoordinates.swipeDiff = this.controlCoordinates.swipeStart - this.controlCoordinates.swipeEnd;\n                this.controlCoordinates.swipeYDiff = this.controlCoordinates.swipeYStart - this.controlCoordinates.swipeYEnd;\n                if (this.options.animationSlide) {\n                    this.slide(0, -this.controlCoordinates.swipeDiff + 'px');\n                }\n            }\n\n        });\n\n\n        this.addEventListener(this.domNodes.image, ['touchend.' + this.eventNamespace, 'mouseup.' + this.eventNamespace, 'touchcancel.' + this.eventNamespace, 'mouseleave.' + this.eventNamespace, 'pointerup', 'pointercancel', 'MSPointerUp', 'MSPointerCancel'], (event) => {\n\n\n            if (this.isTouchDevice && event.type === 'touchend') {\n                this.controlCoordinates.touchCount = event.touches.length;\n                if (this.controlCoordinates.touchCount === 0) /* No touch */ {\n                    /* Set attributes */\n                    if (this.currentImage) {\n                        this.setZoomData(this.controlCoordinates.initialScale, this.controlCoordinates.targetOffsetX, this.controlCoordinates.targetOffsetY);\n                    }\n                    if (this.controlCoordinates.initialScale === 1) {\n                        this.controlCoordinates.zoomed = false;\n                        if (this.domNodes.caption.style.display === 'none') {\n                            this.fadeIn(this.domNodes.caption, this.options.fadeSpeed);\n                        }\n                    }\n                    this.controlCoordinates.initialPinchDistance = null;\n                    this.controlCoordinates.capture = false;\n                } else if (this.controlCoordinates.touchCount === 1) /* Single touch */ {\n                    this.controlCoordinates.initialPointerOffsetX = event.touches[0].clientX;\n                    this.controlCoordinates.initialPointerOffsetY = event.touches[0].clientY;\n                } else if (this.controlCoordinates.touchCount > 1) /* Pinch */ {\n                    this.controlCoordinates.initialPinchDistance = null;\n                }\n            }\n\n\n            if (this.controlCoordinates.mousedown) {\n                this.controlCoordinates.mousedown = false;\n                let possibleDir = true;\n                if (!this.options.loop) {\n                    if (this.currentImageIndex === 0 && this.controlCoordinates.swipeDiff < 0) {\n                        possibleDir = false;\n                    }\n                    if (this.currentImageIndex >= this.relatedElements.length - 1 && this.controlCoordinates.swipeDiff > 0) {\n                        possibleDir = false;\n                    }\n                }\n                if (Math.abs(this.controlCoordinates.swipeDiff) > this.options.swipeTolerance && possibleDir) {\n                    this.loadImage(this.controlCoordinates.swipeDiff > 0 ? 1 : -1);\n                }\n                else if (this.options.animationSlide) {\n                    this.slide(this.options.animationSpeed / 1000, 0 + 'px');\n                }\n\n                if (this.options.swipeClose && Math.abs(this.controlCoordinates.swipeYDiff) > 50 && Math.abs(this.controlCoordinates.swipeDiff) < this.options.swipeTolerance) {\n                    this.close();\n                }\n            }\n        });\n\n        this.addEventListener(this.domNodes.image, ['dblclick'], (event) => {\n            if(this.isTouchDevice) return;\n            this.controlCoordinates.initialPointerOffsetX = event.clientX;\n            this.controlCoordinates.initialPointerOffsetY = event.clientY;\n            this.controlCoordinates.containerHeight = this.getDimensions(this.domNodes.image).height;\n            this.controlCoordinates.containerWidth = this.getDimensions(this.domNodes.image).width;\n            this.controlCoordinates.imgHeight = this.getDimensions(this.currentImage).height;\n            this.controlCoordinates.imgWidth = this.getDimensions(this.currentImage).width;\n            this.controlCoordinates.containerOffsetX = this.domNodes.image.offsetLeft;\n            this.controlCoordinates.containerOffsetY = this.domNodes.image.offsetTop;\n\n            this.currentImage.classList.add('sl-transition');\n\n            if(!this.controlCoordinates.zoomed) {\n                this.controlCoordinates.initialScale = this.options.doubleTapZoom;\n                this.setZoomData(this.controlCoordinates.initialScale, 0, 0);\n                this.zoomPanElement(0 + \"px\", 0 + \"px\", this.controlCoordinates.initialScale);\n                if ((!this.domNodes.caption.style.opacity || this.domNodes.caption.style.opacity > 0) && this.domNodes.caption.style.display !== 'none') {\n                    this.fadeOut(this.domNodes.caption, this.options.fadeSpeed);\n                }\n                this.controlCoordinates.zoomed = true;\n            } else {\n                this.controlCoordinates.initialScale = 1;\n                this.setZoomData(this.controlCoordinates.initialScale, 0, 0);\n                this.zoomPanElement(0 + \"px\", 0 + \"px\", this.controlCoordinates.initialScale);\n                this.controlCoordinates.zoomed = false;\n                if (this.domNodes.caption.style.display === 'none') {\n                    this.fadeIn(this.domNodes.caption, this.options.fadeSpeed);\n                }\n\n            }\n            setTimeout(() => {\n                if (this.currentImage) {\n                    this.currentImage.classList.remove('sl-transition');\n                    this.currentImage.style[this.transitionPrefix + 'transform-origin'] = null;\n                }\n            }, 200);\n\n            this.controlCoordinates.capture = true;\n            return false;\n        });\n\n    }\n\n    getDimensions(element) {\n        let styles = window.getComputedStyle(element),\n            height = element.offsetHeight,\n            width = element.offsetWidth,\n            borderTopWidth = parseFloat(styles.borderTopWidth),\n            borderBottomWidth = parseFloat(styles.borderBottomWidth),\n            paddingTop = parseFloat(styles.paddingTop),\n            paddingBottom = parseFloat(styles.paddingBottom),\n            borderLeftWidth = parseFloat(styles.borderLeftWidth),\n            borderRightWidth = parseFloat(styles.borderRightWidth),\n            paddingLeft = parseFloat(styles.paddingLeft),\n            paddingRight = parseFloat(styles.paddingRight);\n        return {\n            height: height - borderBottomWidth - borderTopWidth - paddingTop - paddingBottom,\n            width: width - borderLeftWidth - borderRightWidth - paddingLeft - paddingRight\n        };\n    }\n\n    updateHash() {\n        let newHash = 'pid=' + (this.currentImageIndex + 1),\n            newURL = window.location.href.split('#')[0] + '#' + newHash;\n\n        this.hashReseted = false;\n\n        if (this.pushStateSupport) {\n            window.history[this.historyHasChanges ? 'replaceState' : 'pushState']('', document.title, newURL);\n        } else {\n            // what is the browser target of this?\n            if (this.historyHasChanges) {\n                window.location.replace(newURL);\n            } else {\n                window.location.hash = newHash;\n            }\n        }\n        if(!this.historyHasChanges) {\n            this.urlChangedOnce = true;\n        }\n\n        this.historyHasChanges = true;\n    }\n\n    resetHash() {\n        this.hashReseted = true;\n        if(this.urlChangedOnce) {\n            history.back();\n        } else {\n            if (this.pushStateSupport) {\n                history.pushState('', document.title, window.location.pathname + window.location.search);\n            } else {\n                window.location.hash = '';\n            }\n        }\n        //\n        //in case an history operation is still pending\n        clearTimeout(this.historyUpdateTimeout);\n    }\n\n    updateURL() {\n        clearTimeout(this.historyUpdateTimeout);\n        if (!this.historyHasChanges) {\n            this.updateHash(); // first time\n        } else {\n            this.historyUpdateTimeout = setTimeout(this.updateHash.bind(this), 800);\n        }\n    }\n\n    setCaption(captionText, imageWidth) {\n        if (this.options.captions && captionText && captionText !== '' && typeof captionText !== \"undefined\") {\n            this.hide(this.domNodes.caption);\n            this.domNodes.caption.style.width = imageWidth + 'px';\n            this.domNodes.caption.innerHTML = captionText;\n\n            this.domNodes.image.appendChild(this.domNodes.caption);\n\n            setTimeout(() => {\n                this.fadeIn(this.domNodes.caption, this.options.fadeSpeed);\n            }, this.options.captionDelay);\n        }\n    }\n\n    slide(speed, pos) {\n        if (!this.transitionCapable) {\n            return this.domNodes.image.style.left = pos;\n        }\n\n        this.domNodes.image.style[this.transitionPrefix + 'transform'] = 'translateX(' + pos + ')';\n        this.domNodes.image.style[this.transitionPrefix + 'transition'] = this.transitionPrefix + 'transform ' + speed + 's linear';\n    }\n\n    getRelated(rel) {\n        let elems;\n        if (rel && rel !== false && rel !== 'nofollow') {\n            elems = Array.from(this.elements).filter(element => element.getAttribute('rel') === rel);\n        } else {\n            elems = this.elements;\n        }\n        return elems;\n    }\n\n    openImage(element) {\n        element.dispatchEvent(new Event('show.' + this.eventNamespace));\n\n        this.globalScrollbarWidth = this.getScrollbarWidth();\n        if (this.options.disableScroll) {\n            this.toggleScrollbar('hide');\n            this.globalScrollbarWidth = 0;\n        }\n\n        if (this.options.htmlClass && this.options.htmlClass !== '') {\n            document.querySelector('html').classList.add(this.options.htmlClass);\n        }\n\n        document.body.appendChild(this.domNodes.wrapper);\n\n        this.domNodes.wrapper.appendChild(this.domNodes.image);\n        if (this.options.overlay) {\n            document.body.appendChild(this.domNodes.overlay);\n        }\n\n        this.relatedElements = this.getRelated(element.rel);\n\n        if (this.options.showCounter) {\n            if (this.relatedElements.length == 1 && this.domNodes.wrapper.contains(this.domNodes.counter)) {\n                this.domNodes.wrapper.removeChild(this.domNodes.counter);\n            } else if(this.relatedElements.length > 1 && !this.domNodes.wrapper.contains(this.domNodes.counter)) {\n                this.domNodes.wrapper.appendChild(this.domNodes.counter);\n            }\n        }\n\n        if (this.options.download && this.domNodes.download) {\n            this.domNodes.wrapper.appendChild(this.domNodes.download);\n        }\n\n        this.isAnimating = true;\n\n        this.currentImageIndex = this.relatedElements.indexOf(element);\n\n        let targetURL = element.getAttribute(this.options.sourceAttr);\n\n        this.currentImage = document.createElement('img');\n        this.currentImage.style.display = 'none';\n        this.currentImage.setAttribute('src', targetURL);\n        this.currentImage.dataset.scale = 1;\n        this.currentImage.dataset.translateX = 0;\n        this.currentImage.dataset.translateY = 0;\n\n        if (this.loadedImages.indexOf(targetURL) === -1) {\n            this.loadedImages.push(targetURL);\n        }\n\n        this.domNodes.image.innerHTML = '';\n        this.domNodes.image.setAttribute('style', '');\n\n        this.domNodes.image.appendChild(this.currentImage);\n\n\n        this.fadeIn(this.domNodes.overlay, this.options.fadeSpeed);\n        this.fadeIn([this.domNodes.counter, this.domNodes.navigation, this.domNodes.closeButton, this.domNodes.download], this.options.fadeSpeed);\n\n        this.show(this.domNodes.spinner);\n        this.domNodes.counter.querySelector('.sl-current').innerHTML = this.currentImageIndex + 1;\n        this.domNodes.counter.querySelector('.sl-total').innerHTML = this.relatedElements.length;\n\n        this.adjustImage();\n        if (this.options.preloading) {\n            this.preload();\n        }\n\n        setTimeout(() => {\n            element.dispatchEvent(new Event('shown.' + this.eventNamespace));\n        }, this.options.animationSpeed);\n    }\n\n    forceFocus() {\n        this.removeEventListener(document, 'focusin.' + this.eventNamespace);\n        this.addEventListener(document, 'focusin.' + this.eventNamespace, event => {\n            if (document !== event.target &&\n                this.domNodes.wrapper !== event.target &&\n                !this.domNodes.wrapper.contains(event.target)) {\n                this.domNodes.wrapper.focus();\n            }\n        });\n    }\n\n    // utility\n    addEventListener(elements, events, callback, opts) {\n        elements = this.wrap(elements);\n        events = this.wrap(events);\n\n        for (let element of elements) {\n            if (!element.namespaces) {\n                element.namespaces = {};\n            } // save the namespaces addEventListener the DOM element itself\n\n            for (let event of events) {\n                let options = opts || false;\n                let needsPassiveFix = ['touchstart', 'touchmove','mousewheel','DOMMouseScroll'].indexOf(event.split('.')[0]) >= 0;\n                if (needsPassiveFix && this.isPassiveEventsSupported) {\n                    if (typeof options === 'object') {\n                        options.passive = true;\n                    } else {\n                        options = {passive: true};\n                    }\n                }\n\n                element.namespaces[event] = callback;\n                element.addEventListener(event.split('.')[0], callback, options);\n            }\n        }\n    }\n\n    removeEventListener(elements, events) {\n        elements = this.wrap(elements);\n        events = this.wrap(events);\n        for (let element of elements) {\n            for (let event of events) {\n                if(element.namespaces && element.namespaces[event]) {\n                    element.removeEventListener(event.split('.')[0], element.namespaces[event]);\n                    delete element.namespaces[event];\n                }\n            }\n        }\n    }\n\n    fadeOut(elements, duration, callback) {\n        elements = this.wrap(elements);\n        for (let element of elements) {\n            element.style.opacity = parseFloat(element) || window.getComputedStyle(element).getPropertyValue(\"opacity\");\n        }\n\n        this.isFadeIn = false;\n\n        let step = 16.66666 / (duration || this.options.fadeSpeed),\n            fade = () => {\n                let currentOpacity = parseFloat(elements[0].style.opacity);\n                if ((currentOpacity -= step) < 0) {\n                    for (let element of elements) {\n                        element.style.display = \"none\";\n                        // element.style.opacity = '';\n                        element.style.opacity = 1;\n                    }\n                    callback && callback.call(this, elements);\n                } else {\n                    for (let element of elements) {\n                        element.style.opacity = currentOpacity;\n                    }\n                    requestAnimationFrame(fade);\n                }\n            };\n\n        fade();\n    }\n\n    fadeIn(elements, duration, callback, display) {\n        elements = this.wrap(elements);\n        for (let element of elements) {\n            if(element) {\n                element.style.opacity = 0;\n                element.style.display = display || \"block\";\n            }\n        }\n\n        this.isFadeIn = true;\n\n        let opacityTarget = parseFloat(elements[0].dataset.opacityTarget || 1),\n            step = (16.66666 * opacityTarget) / (duration || this.options.fadeSpeed),\n            fade = () => {\n                let currentOpacity = parseFloat(elements[0].style.opacity);\n                if (!((currentOpacity += step) > opacityTarget)) {\n                    for (let element of elements) {\n                        if(element) {\n                            element.style.opacity = currentOpacity;\n                        }\n                    }\n                    if(!this.isFadeIn) return;\n                    requestAnimationFrame(fade);\n                } else {\n                    for (let element of elements) {\n                        if(element) {\n                            element.style.opacity = opacityTarget;\n                        }\n                    }\n                    callback && callback.call(this, elements);\n                }\n            };\n\n        fade();\n    }\n\n    hide(elements) {\n        elements = this.wrap(elements);\n        for (let element of elements) {\n            if(element.style.display != 'none') {\n                element.dataset.initialDisplay = element.style.display;\n            }\n            element.style.display = 'none';\n        }\n    }\n\n    show(elements, display) {\n        elements = this.wrap(elements);\n        for (let element of elements) {\n            element.style.display = element.dataset.initialDisplay || display || 'block';\n        }\n    }\n\n    wrap(input) {\n        return typeof input[Symbol.iterator] === 'function' && typeof input !== 'string' ? input : [input];\n    }\n\n    on(events, callback) {\n        events = this.wrap(events);\n        for (let element of this.elements) {\n            if (!element.fullyNamespacedEvents) {\n                element.fullyNamespacedEvents = {};\n            }\n            for (let event of events) {\n                element.fullyNamespacedEvents[event] = callback;\n                element.addEventListener(event, callback);\n            }\n        }\n        return this;\n    }\n\n    off(events) {\n        events = this.wrap(events);\n        for (let element of this.elements) {\n            for (let event of events) {\n                if (typeof element.fullyNamespacedEvents !== 'undefined' && event in element.fullyNamespacedEvents) {\n                    element.removeEventListener(event, element.fullyNamespacedEvents[event]);\n                }\n            }\n        }\n        return this;\n    }\n\n    // api\n\n    open(elem, position = 0) {\n        elem = elem || this.elements[0];\n        if(typeof jQuery !== \"undefined\" && elem instanceof jQuery) {\n            elem = elem.get(0);\n        }\n        if(position > 0) {\n            elem = this.elements[position];\n        }\n        this.initialImageIndex = this.elements.indexOf(elem);\n        if(this.initialImageIndex > -1) {\n            this.openImage(elem);\n        }\n    }\n\n    openPosition(position) {\n        let elem = this.elements[position];\n        this.open(elem, position)\n    }\n    next() {\n        this.loadImage(1);\n    }\n\n    prev() {\n        this.loadImage(-1);\n    }\n\n    // get some useful data\n    getLighboxData() {\n        return {\n            currentImageIndex: this.currentImageIndex,\n            currentImage: this.currentImage,\n            globalScrollbarWidth: this.globalScrollbarWidth\n        };\n    }\n\n    //close is exposed anyways..\n\n    destroy() {\n        //remove all custom event listeners from elements\n        this.off([\n            'close.' + this.eventNamespace,\n            'closed.' + this.eventNamespace,\n            'nextImageLoaded.' + this.eventNamespace,\n            'prevImageLoaded.' + this.eventNamespace,\n            'change.' + this.eventNamespace,\n            'nextDone.' + this.eventNamespace,\n            'prevDone.' + this.eventNamespace,\n            'error.' + this.eventNamespace,\n            'changed.' + this.eventNamespace,\n            'next.' + this.eventNamespace,\n            'prev.' + this.eventNamespace,\n            'show.' + this.eventNamespace,\n            'shown.' + this.eventNamespace\n        ]);\n\n        this.removeEventListener(this.elements, 'click.' + this.eventNamespace);\n        this.removeEventListener(document, 'focusin.' + this.eventNamespace);\n        this.removeEventListener(document.body, 'contextmenu.' + this.eventNamespace);\n        this.removeEventListener(document.body, 'keyup.' + this.eventNamespace);\n\n        this.removeEventListener(this.domNodes.navigation.getElementsByTagName('button'), 'click.' + this.eventNamespace);\n        this.removeEventListener(this.domNodes.closeButton, 'click.' + this.eventNamespace);\n        this.removeEventListener(window, 'resize.' + this.eventNamespace);\n        this.removeEventListener(window, 'hashchange.' + this.eventNamespace);\n\n        this.close();\n        if (this.isOpen) {\n            document.body.removeChild(this.domNodes.wrapper);\n            document.body.removeChild(this.domNodes.overlay);\n        }\n\n        this.elements = null;\n    }\n\n    refresh() {\n        if (!this.initialSelector) {\n            throw 'refreshing only works when you initialize using a selector!';\n        }\n\n        let options = this.options,\n            selector = this.initialSelector;\n\n        this.destroy();\n\n        this.constructor(selector, options);\n\n        return this;\n    }\n}\nexport default SimpleLightbox;\n\nglobal.SimpleLightbox = SimpleLightbox;\n"],"names":["$parcel$global","globalThis","self","window","global","$945867cc3302d81d$var$SimpleLightbox","defaultOptions","sourceAttr","overlay","overlayOpacity","spinner","nav","navText","captions","captionDelay","captionSelector","captionType","captionsData","captionPosition","captionClass","close","closeText","swipeClose","showCounter","fileExt","animationSlide","animationSpeed","preloading","enableKeyboard","loop","rel","docClose","swipeTolerance","className","widthRatio","heightRatio","scaleImageToRatio","disableRightClick","disableScroll","alertError","alertErrorMessage","additionalHtml","history","throttleInterval","doubleTapZoom","maxZoom","htmlClass","rtl","fixedClass","fadeSpeed","uniqueImages","focus","scrollZoom","scrollZoomFactor","download","transitionPrefix","isPassiveEventsSupported","transitionCapable","isTouchDevice","isAppleDevice","test","navigator","platform","initialLocationHash","pushStateSupport","isOpen","isAnimating","isClosing","isFadeIn","urlChangedOnce","hashReseted","historyHasChanges","historyUpdateTimeout","currentImage","eventNamespace","domNodes","loadedImages","initialImageIndex","currentImageIndex","initialSelector","globalScrollbarWidth","controlCoordinates","swipeDiff","swipeYDiff","swipeStart","swipeEnd","swipeYStart","swipeYEnd","mousedown","imageLeft","zoomed","containerHeight","containerWidth","containerOffsetX","containerOffsetY","imgHeight","imgWidth","capture","initialOffsetX","initialOffsetY","initialPointerOffsetX","initialPointerOffsetY","initialPointerOffsetX2","initialPointerOffsetY2","initialScale","initialPinchDistance","pointerOffsetX","pointerOffsetY","pointerOffsetX2","pointerOffsetY2","targetOffsetX","targetOffsetY","targetScale","pinchOffsetX","pinchOffsetY","limitOffsetX","limitOffsetY","scaleDifference","targetPinchDistance","touchCount","doubleTapped","touchmoveCount","constructor","elements","options","Object","assign","checkPassiveEventsSupport","Array","from","document","querySelectorAll","length","relatedElements","calculateTransitionPrefix","hash","getRelated","imgArr","filter","element","src","getAttribute","indexOf","push","createDomNodes","wrapper","appendChild","closeButton","navigation","addEventListener","event","isValidLink","currentTarget","preventDefault","openImage","target","body","parentElement","classList","contains","throttle","key","setAttribute","loadImage","addEvents","supportsPassive","opts","defineProperty","get","removeEventListener","e","getCaptionElement","elem","startsWith","selector","replace","trimStart","sibling","nextElementSibling","matches","querySelector","generateQuerySelector","tagName","id","parentNode","str","classes","trim","split","i","childIndex","previousElementSibling","createElement","add","dataset","opacityTarget","innerHTML","counter","downloadLink","textContent","caption","captionClasses","image","func","limit","inThrottle","apply","arguments","setTimeout","RegExp","s","documentElement","style","getScrollbarWidth","scrollbarWidth","scrollDiv","offsetWidth","clientWidth","removeChild","toggleScrollbar","type","fixedElements","slice","call","fullWindowWidth","innerWidth","documentElementRect","getBoundingClientRect","right","Math","abs","left","paddingRight","parseInt","getComputedStyle","originalPaddingRight","forEach","actualPadding","calculatedPadding","parseFloat","remove","padding","dispatchEvent","Event","resetHash","fadeOut","minMax","location","substring","preload","index","nextImage","Image","prevImage","direction","slideDirection","newIndex","slide","show","adjustImage","tmpImage","windowWidth","windowHeight","innerHeight","scale","translateX","translateY","zoomPanElement","display","dirIsDefined","alert","captionContainer","captionText","updateURL","imageWidth","width","imageHeight","height","ratio","top","forceFocus","fadeIn","hide","setCaption","value","min","max","setZoomData","hashchangeHandler","bind","getElementsByTagName","match","getDimensions","offsetLeft","offsetTop","delta","wheelDelta","undefined","detail","scrollTopPos","scrollTop","pageX","pageY","opacity","clientX","clientY","touches","sqrt","possibleDir","styles","offsetHeight","borderTopWidth","borderBottomWidth","paddingTop","paddingBottom","borderLeftWidth","borderRightWidth","paddingLeft","updateHash","newHash","newURL","href","title","back","pushState","pathname","search","clearTimeout","speed","pos","targetURL","events","callback","wrap","namespaces","passive","duration","getPropertyValue","step","fade","currentOpacity","requestAnimationFrame","initialDisplay","input","Symbol","iterator","on","fullyNamespacedEvents","off","open","position","jQuery","openPosition","next","prev","getLighboxData","destroy","refresh","SimpleLightbox"],"version":3,"file":"index.d7c5fa85.js.map"}